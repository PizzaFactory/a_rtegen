/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2015 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 *
 *  $Id $
 */
package jp.ac.nagoya_u.is.nces.a_rte.m2m.internal.module.builder;

import jp.ac.nagoya_u.is.nces.a_rte.m2m.internal.common.util.SymbolNames;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.BlackboxType;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.Constant;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.ModuleFactory;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.PrimitiveType;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.Rte;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.SignednessEnum;

/**
 * 組込シンボルのモデルを構築します。
 * 
 * 組込シンボルは、コンフィグ内容に関わらず内容が固定のシンボル(ソースコード側で決め打ちされているもの)を表す。
 */
public class BuiltinSymbolModelBuilder {

	private final ModuleModelBuildContext context;

	public BuiltinSymbolModelBuilder(ModuleModelBuildContext context) {
		this.context = context;
	}

	public void build() {
		buildBuiltinTypes(this.context.cache.rte);
		buildBuiltinConstants(this.context.cache.rte);
	}

	private void buildBuiltinTypes(Rte targetRte) {
		this.context.cache.voidType = buildBuiltinBlackboxType(targetRte, SymbolNames.VOID_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.booleanType = buildBuiltinPrimitiveType(targetRte, SymbolNames.BOOLEAN_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.uint8Type = buildBuiltinPrimitiveType(targetRte, SymbolNames.UINT8_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.uint16Type = buildBuiltinPrimitiveType(targetRte, SymbolNames.UINT16_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.uint32Type = buildBuiltinPrimitiveType(targetRte, SymbolNames.UINT32_TYPE_NAME, SignednessEnum.UNSIGNED);

		this.context.cache.stdReturnType = buildBuiltinPrimitiveType(targetRte, SymbolNames.STD_RETURN_TYPE_NAME, SignednessEnum.UNSIGNED);

		this.context.cache.osStatusType = buildBuiltinPrimitiveType(targetRte, SymbolNames.OS_STATUS_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.osApplicationType = buildBuiltinPrimitiveType(targetRte, SymbolNames.OS_APPLICATION_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.osTaskType = buildBuiltinPrimitiveType(targetRte, SymbolNames.OS_TASK_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.osEventMaskType = buildBuiltinPrimitiveType(targetRte, SymbolNames.OS_EVENT_MASK_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.osResourceType = buildBuiltinPrimitiveType(targetRte, SymbolNames.OS_RESOURCE_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.osSpinlockIdType = buildBuiltinPrimitiveType(targetRte, SymbolNames.OS_SPINLOCK_ID_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.osTfIndexType = buildBuiltinPrimitiveType(targetRte, SymbolNames.OS_TRUSTED_FUNCTION_INDEX_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.osTfParamRefType = buildBuiltinBlackboxType(targetRte, SymbolNames.OS_TRUSTED_FUNCTION_PARAMETER_REF_TYPE_NAME, SignednessEnum.UNSIGNED);

		this.context.cache.comSignalIdType = buildBuiltinPrimitiveType(targetRte, SymbolNames.COM_SIGNAL_ID_TYPE_NAME, SignednessEnum.UNSIGNED);
		
		this.context.cache.comMetaDataTypeMemberOffsetType = buildBuiltinBlackboxType(targetRte, SymbolNames.COM_META_DATA_TYPE_MEMBER_OFFSET_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.comMetaDataType = buildBuiltinBlackboxType(targetRte, SymbolNames.COM_META_DATA_TYPE_NAME, SignednessEnum.UNSIGNED);
		this.context.cache.comProxyFunctionTableIndexType = buildBuiltinPrimitiveType(targetRte, SymbolNames.COM_PROXY_FUNCTION_TABLE_INDEX_TYPE_NAME, SignednessEnum.UNSIGNED);
	}

	private PrimitiveType buildBuiltinPrimitiveType(Rte targetRte, String symbolName, SignednessEnum signedness) {
		PrimitiveType type = ModuleFactory.eINSTANCE.createPrimitiveType();
		type.setSymbolName(symbolName);
		type.setSignedness(signedness);
		targetRte.getDependentType().add(type);
		return type;
	}

	private BlackboxType buildBuiltinBlackboxType(Rte targetRte, String symbolName, SignednessEnum signedness) {
		BlackboxType type = ModuleFactory.eINSTANCE.createBlackboxType();
		type.setSymbolName(symbolName);
		type.setSignedness(signedness);
		targetRte.getDependentType().add(type);
		return type;
	}

	private void buildBuiltinConstants(Rte targetRte) {
		this.context.cache.rteErrorOkConstant = createBuiltinConstant(SymbolNames.RTE_E_OK_CONSTANT_NAME);
		targetRte.getDependentConstant().add(this.context.cache.rteErrorOkConstant);

		this.context.cache.rteErrorInvalidConstant = createBuiltinConstant(SymbolNames.RTE_E_INVALID_CONSTANT_NAME);
		targetRte.getDependentConstant().add(this.context.cache.rteErrorInvalidConstant);

		this.context.cache.rteErrorMaxAgeExceededConstant = createBuiltinConstant(SymbolNames.RTE_E_MAX_AGE_EXCEEDED_CONSTANT_NAME);
		targetRte.getDependentConstant().add(this.context.cache.rteErrorMaxAgeExceededConstant);
	}

	private Constant createBuiltinConstant(String symbolName) {
		Constant constant = ModuleFactory.eINSTANCE.createConstant();
		constant.setSymbolName(symbolName);
		return constant;
	}
}
