/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2015 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 *
 *  $Id $
 */
package jp.ac.nagoya_u.is.nces.a_rte.m2m.internal.module.util;

import jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.m2.ImplementationDataType;
import jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.m2.ImplementationDataTypeElement;
import jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.m2.SwBaseType;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.PointerType;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.PrimitiveType;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.RedefinitionType;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.SignednessEnum;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.Type;

public class Types { // COVERAGE 常に未達(インスタンス生成が行なわれていないが，ユーティリティであるため問題ない)

	public static SignednessEnum getSignedness(ImplementationDataType sourceDataType) {
		if (SwBaseType.BASE_TYPE_ENCODING_NONE.equals(sourceDataType.getBaseType().getBaseTypeEncoding())) {
			return SignednessEnum.UNSIGNED;

		} else if (SwBaseType.BASE_TYPE_ENCODING_BOOLEAN.equals(sourceDataType.getBaseType().getBaseTypeEncoding())) {
			return SignednessEnum.UNSIGNED;

		} else {
			// それ以外のエンコーディングは符号ありと認識
			return SignednessEnum.SIGNED;
		}
	}

	public static SignednessEnum getSignedness(ImplementationDataTypeElement sourceDataType) {
		if (SwBaseType.BASE_TYPE_ENCODING_NONE.equals(sourceDataType.getSwDataDefProps().getBaseType().getBaseTypeEncoding())) {
			return SignednessEnum.UNSIGNED;

		} else if (SwBaseType.BASE_TYPE_ENCODING_BOOLEAN.equals(sourceDataType.getSwDataDefProps().getBaseType().getBaseTypeEncoding())) {
			return SignednessEnum.UNSIGNED;

		} else {
			// それ以外のエンコーディングは符号ありと認識
			return SignednessEnum.SIGNED;
		}
	}

	/**
	 * アトミックにアクセスできる{@link Type}であるかを判定します。
	 * @param type 判定対象の{@link Type}
	 * @return アトミックにアクセスできる{@link Type}である場合、true。それ以外の場合、false。
	 */
	public static boolean isAtomicType(Type type) {
		Type leafType;
		if (type instanceof RedefinitionType) {
			leafType = ((RedefinitionType) type).getLeafType();
		} else {
			leafType = type;
		}

		return (leafType instanceof PrimitiveType && !isDestOfFloat64ImplementationDataType(leafType)) || leafType instanceof PointerType;
	}

	/**
	 * float64の{@link ImplementationDataType}から生成された{@link Type}であるかを判定する。
	 * @param destType 判定対象の{@link Type}
	 * @return float64の{@link ImplementationDataType}から生成された{@link Type}である場合、true。それ以外の場合、false。
	 */
	private static boolean isDestOfFloat64ImplementationDataType(Type destType) {
		if (!(destType.getSingleSource() instanceof ImplementationDataType)) {	// COVERAGE 常にtrue(不具合混入時のみ到達するコードなので，未カバレッジで問題ない)
			return false;
		}

		ImplementationDataType sourceImplDataType = (ImplementationDataType) destType.getSingleSource();

		if (!(destType instanceof PrimitiveType)) {	// COVERAGE 常にtrue(呼び出し元で事前チェックしているため，未カバレッジで問題ない)
			return false;
		}

		return SwBaseType.BASE_TYPE_ENCODING_IEEE754.equals(sourceImplDataType.getBaseType().getBaseTypeEncoding()) && destType.getSize() == 64;
	}
}
