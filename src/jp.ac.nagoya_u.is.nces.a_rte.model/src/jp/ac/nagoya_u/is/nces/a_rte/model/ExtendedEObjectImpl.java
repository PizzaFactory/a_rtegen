/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2014 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 *
 *  $Id $
 */
package jp.ac.nagoya_u.is.nces.a_rte.model;

import java.util.ArrayList;
import java.util.List;

import jp.ac.nagoya_u.is.nces.a_rte.model.util.EmfUtils;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

public class ExtendedEObjectImpl extends MinimalEObjectImpl.Container implements ExtendedEObject {

	private class UnresolvedReference {
		public final EReference eReference;
		public final String id;

		public UnresolvedReference(EReference eReference, String referenceId) {
			this.eReference = eReference;
			this.id = referenceId;
		}
	}

	private final List<UnresolvedReference> unresolvedReferences = new ArrayList<UnresolvedReference>();

	@Override
	public void addUnresolvedReference(EReference eReference, String id) {
		this.unresolvedReferences.add(new UnresolvedReference(eReference, id));
	}

	@Override
	public void resolveReferences() throws ModelException {
		for (UnresolvedReference unresolvedReference : this.unresolvedReferences) {
			EObject eObject = eResource().getEObject(unresolvedReference.id);
			if (eObject == null) {
				throw new ModelException("The referenced object " + EmfUtils.idToReference(unresolvedReference.id) + " does not exist for the parameter '"
						+ unresolvedReference.eReference.getName() + "' of " + ModelLabels.getLabel(this) + ".");
			}
			if (!unresolvedReference.eReference.getEType().isInstance(eObject)) {
				throw new ModelException("The referenced object " + EmfUtils.idToReference(unresolvedReference.id) + " is not typed with "
						+ unresolvedReference.eReference.getEReferenceType().getName() + " for the parameter '" + unresolvedReference.eReference.getName() + "' of "
						+ ModelLabels.getLabel(this) + ".");
			}
			if (unresolvedReference.eReference.isMany()) {
				@SuppressWarnings("unchecked")
				EList<EObject> list = (EList<EObject>) eGet(unresolvedReference.eReference);
				list.add(eObject);
			} else {
				eSet(unresolvedReference.eReference, eObject);
			}
		}
		this.unresolvedReferences.clear();
	}
}
