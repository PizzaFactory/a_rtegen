/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2014 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 *
 *  $Id $
 */
package jp.ac.nagoya_u.is.nces.a_rte.model;

import static jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.m2.M2Package.Literals.REFERRABLE;

import java.util.Collections;
import java.util.List;

import jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.ecuc.EcucReferrable;
import jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.m2.IInstanceRef;
import jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.m2.M2Object;
import jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.m2.Referrable;
import jp.ac.nagoya_u.is.nces.a_rte.model.util.EmfUtils;

import org.eclipse.emf.ecore.EObject;

import com.google.common.base.Function;
import com.google.common.base.Optional;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;

public class ModelLabels { // COVERAGE 常に未達(インスタンス生成が行なわれていないが，ユーティリティであるため問題ない)

	public static String getLabel(EObject eObject) {
		if (eObject instanceof Referrable) {
			Referrable referrable = (Referrable) eObject;
			return getLabelOfReferrable(referrable);
		
		} else if (eObject instanceof EcucReferrable) {
			EcucReferrable referrable = (EcucReferrable) eObject;
			return getLabelOfReferrable(referrable);
			
		} else if (eObject instanceof M2Object) {
			Optional<Referrable> referrable = EmfUtils.tryFindParentOfType(eObject, REFERRABLE);
			return referrable.isPresent() ? getLabelOfNonReferrable(eObject) + " in " + getLabelOfReferrable(referrable.get()) : getLabelOfNonReferrable(eObject);
		
		} else {
			return getLabelOfNonReferrable(eObject);
		}
	}

	private static String getLabelOfNonReferrable(EObject eObject) {
		return eObject.eClass().getName();
	}

	private static String getLabelOfReferrable(EcucReferrable ecucReferrable) {
		return "'" + ecucReferrable.eClass().getName() + " " + ecucReferrable.getReference() + "'";
	}

	private static String getLabelOfReferrable(Referrable referrable) {
		return "'" + referrable.eClass().getName() + " " + referrable.getReference() + "'";
	}

	public static String getLabelOfInstanceRef(IInstanceRef instanceRef) {
		if (instanceRef.getInstanceRef().isEmpty()) { // COVERAGE 常にfalse(trueとなるのは不具合混入時のみなので，未カバレッジで問題ない)
			return "";
		}
	
		StringBuilder sb = new StringBuilder();
	
		List<String> references = idsToReferences(instanceRef.getInstanceRef());
	
		String targetReference = Iterables.getLast(references);
		sb.append("'" + targetReference + "'");
	
		List<String> contextReferences = references.size() <= 1 ? Collections.<String> emptyList() : references.subList(0, references.size() - 1); // COVERAGE 常にfalse(trueとなるのは不具合混入時のみなので，未カバレッジで問題ない)
		for (String contextReference : Lists.reverse(contextReferences)) {
			sb.append(" in '" + contextReference + "'");
		}
		return sb.toString();
	}

	private static List<String> idsToReferences(List<String> ids) {
		return Lists.transform(ids, new Function<String, String>() {
			@Override
			public String apply(String input) {
				return EmfUtils.idToReference(input);
			}
		});
	}
}
