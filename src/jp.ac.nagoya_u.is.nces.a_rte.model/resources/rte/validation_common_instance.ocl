/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2014 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 * 
 *  $Id: header.ocl 6220 2013-11-28 07:33:32Z t-inoue $
 */
import '../../model/ar4x.ecore#/'
import '../../model/rte.ecore#/'

package ar4x::m2
	/*
	 * M2Object
	 */
	context M2Object

	def:
	valueSpecificationEx : rte::ex::ValueSpecificationEx = rte::ex::ValueSpecificationEx.allInstances()
	->any(true)
	
	/*
	 * SwDataDefProps
	 */
	context SwDataDefProps
	
	def:
	endInvalidValue : ValueSpecification = if self.invalidValue.oclIsUndefined() then null else valueSpecificationEx.getEndValueSpec(self.invalidValue) endif

	inv nrte_sws_0153:
	self.invalidValue.oclIsUndefined() or endInvalidValue.oclIsKindOf(NumericalValueSpecification) or endInvalidValue.oclIsKindOf(TextValueSpecification)

	/*
	 * VariableDataPrototype
	 */

	context VariableDataPrototype

	inv nrte_sws_0132:
	InvalidationPolicy.allInstances()
	->select(dataElement = self)
	->size() <= 1

	/*
	 * AtomicSwComponentType
	 */

	context AtomicSwComponentType
	
	def: usingAppErrs : Set(ApplicationError) = getUsingClientServerInterfaces().possibleError->asOrderedSet()

	inv nrte_sws_0138:
	not self.internalBehavior.oclIsUndefined()

	inv nrte_sws_0114:
	getUsingApplicationDataTypes()->forAll(t | getImplementationDataTypes(t)->size() = 1)

	inv nrte_sws_0157:
	usingAppErrs->forAll(ae |
		let otherAppErrsWithSameName : Set(ApplicationError) = usingAppErrs->select(shortName = ae.shortName and parent.shortName = ae.parent.shortName)->excluding(ae)
		in otherAppErrsWithSameName->forAll(errorCode = ae.errorCode))

	/*
	 * PortPrototype
	 */

	context PortPrototype

	inv nrte_sws_0139:
	self.portApiOption
	->size() <= 1

	/*
	 * RPortPrototype
	 */

	context RPortPrototype

	inv nrte_sws_0119:
	self.requiredComSpec
	->selectByKind(ReceiverComSpec)
	->isUnique(dataElement)

	/*
	 * PPortPrototype
	 */

	context PPortPrototype

	inv nrte_sws_0120:
	self.providedComSpec
	->selectByKind(SenderComSpec)
	->isUnique(dataElement)

	/*
	 * NonqueuedReceiverComSpec
	 */

	context NonqueuedReceiverComSpec

	def:
	endInitValue : ValueSpecification = valueSpecificationEx.getEndValueSpec(self.initValue)

	inv nrte_sws_0128:
	endInitValue.oclIsKindOf(NumericalValueSpecification) or endInitValue.oclIsKindOf(TextValueSpecification)

	/*
	 * NonqueuedSenderComSpec
	 */

	context NonqueuedSenderComSpec

	def:
	endInitValue : ValueSpecification = valueSpecificationEx.getEndValueSpec(self.initValue)

	inv nrte_sws_0128:
	endInitValue.oclIsKindOf(NumericalValueSpecification) or endInitValue.oclIsKindOf(TextValueSpecification)

	/*
	 * DataFilter
	 */

	context DataFilter

	inv nrte_sws_0122:
	self.dataFilterType <> DataFilterTypeEnum::maskedNewEqualsX
	or not self.mask.oclIsUndefined() and not self.x.oclIsUndefined()

	inv nrte_sws_0123:
	self.dataFilterType <> DataFilterTypeEnum::maskedNewDiffersMaskedOld or not self.mask.oclIsUndefined()

	inv nrte_sws_0124:
	self.dataFilterType <> DataFilterTypeEnum::maskedNewDiffersX
	or not self.mask.oclIsUndefined() and not self.x.oclIsUndefined()

	inv nrte_sws_0125:
	self.dataFilterType <> DataFilterTypeEnum::newIsWithin
	or not self.max.oclIsUndefined() and not self.min.oclIsUndefined()

	inv nrte_sws_0126:
	self.dataFilterType <> DataFilterTypeEnum::newIsOutside
	or not self.max.oclIsUndefined() and not self.min.oclIsUndefined()

	inv nrte_sws_0127:
	self.dataFilterType <> DataFilterTypeEnum::oneEveryN
	or not self.period.oclIsUndefined() and not self.offset.oclIsUndefined()

	/*
	 * RteEvent
	 */

	context RteEvent

	inv nrte_sws_0113:
	not self.startOnEvent.oclIsUndefined()
	
endpackage

package ar4x::instance

	/*
	 * PVariableDataInstanceInSwc
	 */
	context PVariableDataInstanceInSwc

	inv nrte_sws_0117:
	not self.isInvalidationEnabled() or not self.getInvalidValue().oclIsUndefined()

	inv nrte_sws_0144:
	self.getComSpec().oclIsUndefined() or not self.getComSpec().oclIsKindOf(m2::NonqueuedSenderComSpec)
	or not self.isEventSemantics()

	inv nrte_sws_0145:
	self.getInvalidationPolicy().oclIsUndefined() or not self.isEventSemantics()

	/*
	 * RVariableDataInstanceInSwc
	 */
	context RVariableDataInstanceInSwc

	inv nrte_sws_0117:
	not self.isInvalidationEnabled() or not self.getInvalidValue().oclIsUndefined()
	
	inv nrte_sws_0142:
	self.getComSpec().oclIsUndefined() or not self.getComSpec().oclIsKindOf(m2::NonqueuedReceiverComSpec)
	or not self.isEventSemantics()

	inv nrte_sws_0143:
	self.getComSpec().oclIsUndefined() or not self.getComSpec().oclIsKindOf(m2::QueuedReceiverComSpec)
	or self.isEventSemantics()

	inv nrte_sws_0145:
	self.getInvalidationPolicy().oclIsUndefined() or not self.isEventSemantics()

	/*
	 * POperationInstanceInSwc
	 */
	context POperationInstanceInSwc

	inv nrte_sws_0130:
	self.operationInvokedEvent
	->size() = 1

endpackage
