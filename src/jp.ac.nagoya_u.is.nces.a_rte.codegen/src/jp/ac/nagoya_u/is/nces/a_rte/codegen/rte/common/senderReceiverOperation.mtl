[comment]
/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2014 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 * 
 *  $Id: senderReceiverOperation.mtl 8456 2014-06-27 00:35:45Z i.tanaka $
 */
[/comment]
[comment encoding = EUC-JP /]
[module senderReceiverOperation('http://nces.is.nagoya-u.ac.jp/a-rte/rte/module')]

[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::operationUtil /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::excludeOperation /]


[template public genSendOperation(aSendOperation : SendOperation) /]

[comment RTE送信/]
[template private genSendOperation(aSendOperation : RteBufferNonqueuedSendOperation) ]
[let aExcludeOperation : ExcludeOperation = aSendOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationEnter()/]
[/let]
[if aSendOperation.filterOperation.oclIsUndefined()]
	[aSendOperation.genRteBufferOperation()/]
[else]
	[aSendOperation.filterOperation.genFilterOperation(aSendOperation.sendValue, aSendOperation.genRteBufferOperation())/]
[/if]
[let aExcludeOperation : ExcludeOperation = aSendOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationExit()/]
[/let]
[/template]

[template private genRteBufferOperation(aRteBufferSendOperation : RteBufferNonqueuedSendOperation) post(trim()) ]
[aRteBufferSendOperation.accessVariable.valueVariable.symbolName/] = [aRteBufferSendOperation.sendValue.genValueAccess()/];
[if (not aRteBufferSendOperation.accessVariable.statusVariable.oclIsUndefined())]
	[aRteBufferSendOperation.accessVariable.statusVariable.symbolName/] = [aRteBufferSendOperation.sendStatus.genValueAccess()/];
[/if]
[/template]

[template private genSendOperation(aSendOperation : TrustedFunctionRteBufferWriteSendOperation) ]
(void) CallTrustedFunction([aSendOperation.accessTrustedFunction.trustedFunctionIndex/], (TrustedFunctionParameterRefType) [aSendOperation.sendValue.genPointerAccess()/]);
[/template]

[template private genSendOperation(aSendOperation : TrustedFunctionRteBufferInvalidateSendOperation) ]
(void) CallTrustedFunction([aSendOperation.accessTrustedFunction.trustedFunctionIndex/], (TrustedFunctionParameterRefType) NULL_PTR);
[/template]

[template private genSendOperation(aSendOperation : IocNonqueuedSendOperation) ]
(void) [aSendOperation.accessApi.symbolName/]([aSendOperation.sendValue.genValueAccess()/]);
[/template]

[template private genSendOperation(aSendOperation : ComSendOperation) /]

[template private genSendOperation(aSendOperation : DirectComSendOperation) ]
if ([aSendOperation.accessApi.symbolName/]([aSendOperation.accessApi.comSignalSymbolName/], [aSendOperation.sendValue.genPointerAccess()/]) == COM_SERVICE_NOT_AVAILABLE) {
	[aSendOperation.returnVariable.genValueAccess()/] = RTE_E_COM_STOPPED;
}
[/template]

[template private genSendOperation(aSendOperation : TrustedFunctionComSendOperation) ]
[aSendOperation.trustedFunctionParamVariable.genMemberAccess('com_sig_id')/] = [aSendOperation.accessApi.comSignalSymbolName/];
[aSendOperation.trustedFunctionParamVariable.genMemberAccess('com_data')/] = [aSendOperation.sendValue.genPointerAccess()/];
if (CallTrustedFunction([aSendOperation.accessTrustedFunction.trustedFunctionIndex/], [aSendOperation.trustedFunctionParamVariable.genPointerAccess()/]) == COM_SERVICE_NOT_AVAILABLE) {
	[aSendOperation.returnVariable.genValueAccess()/] = RTE_E_COM_STOPPED;
}
[/template]

[template private genSendOperation(aSendOperation : ImmediateProxyComSendOperation) ]
[comment NOTE IOC APIの結果からCOMの状態はわからないため，戻り値は返さない/]
(void) [aSendOperation.accessProxyApi.symbolName/]([aSendOperation.accessApi.comSignalSymbolName/], [aSendOperation.sendValue.genValueAccess()/]);
(void) [aSendOperation.activationApi.symbolName/]([aSendOperation.activationApi.osTaskId/], [aSendOperation.activationApi.osEventId/]);
[/template]

[template private genSendOperation(aSendOperation : PeriodicProxyComSendOperation) ]
[comment NOTE IOC APIの結果からCOMの状態はわからないため，戻り値は返さない/]
(void) [aSendOperation.accessProxyApi.symbolName/]([aSendOperation.accessApi.comSignalSymbolName/], [aSendOperation.sendValue.genValueAccess()/]);
[/template]

[template private genSendOperation(aSendOperation : RteBufferQueuedSendOperation) ]
[let aExcludeOperation : ExcludeOperation = aSendOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationEnter()/]
[/let]
[if (aSendOperation.tempReturnVariable.oclIsUndefined())]
	Rte_EnqueueNoReturn([aSendOperation.accessVariable.genPointerAccess()/], [aSendOperation.sendValue.genValueAccess()/], [aSendOperation.accessVariable.queueType.maxLengthConstant.genValueAccess()/]);
[else]
	Rte_Enqueue([aSendOperation.accessVariable.genPointerAccess()/], [aSendOperation.sendValue.genValueAccess()/], [aSendOperation.accessVariable.queueType.maxLengthConstant.genValueAccess()/], (Std_ReturnType *) [aSendOperation.tempReturnVariable.genPointerAccess()/]);
[/if]
[let aExcludeOperation : ExcludeOperation = aSendOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationExit()/]
[/let]
[if (not aSendOperation.returnVariable.oclIsUndefined())]
	if ([aSendOperation.tempReturnVariable.genValueAccess()/] == RTE_E_LIMIT) {
		[aSendOperation.returnVariable.genValueAccess()/] = [aSendOperation.tempReturnVariable.genValueAccess()/];
	}
[/if]
[/template]

[template private genSendOperation(aSendOperation : IocQueuedSendOperation) ]
[if (aSendOperation.returnVariable.oclIsUndefined())]
	(void) [aSendOperation.accessApi.symbolName/]([aSendOperation.sendValue.genValueAccess()/]);
[else]
	if ([aSendOperation.accessApi.symbolName/]([aSendOperation.sendValue.genValueAccess()/]) == IOC_E_LIMIT) {
		[aSendOperation.returnVariable.genValueAccess()/] = RTE_E_LIMIT;
	}
[/if]
[/template]

[template private genFilterOperation(aFilterOperation : FilterOperation, aValue : Value, aBody : String)]
[aFilterOperation.filterResultVariable.genValueAccess()/] = FALSE;
if ([aFilterOperation.genFilterCheck(aValue)/]) {
	[let aMaskedNewDiffersMaskedOldFilterOperation : MaskedNewDiffersMaskedOldFilterOperation = aFilterOperation]
		[aMaskedNewDiffersMaskedOldFilterOperation.oldValueVariable.genValueAccess()/] = [aValue.genValueAccess()/];
	[/let]
	[aFilterOperation.filterResultVariable.genValueAccess()/] = TRUE;
}
if ([aFilterOperation.filterResultVariable.genValueAccess()/] == TRUE) {
	[aBody/]
}
[let aOneEveryNFilterOperation : OneEveryNFilterOperation = aFilterOperation]
	[aOneEveryNFilterOperation.occurrenceVariable.genValueAccess()/] = ([aOneEveryNFilterOperation.occurrenceVariable.genValueAccess()/] + 1U) % [aOneEveryNFilterOperation.period.genValueAccess()/];
[/let]
[/template]

[template public genReadOperation(aReadOperation : ReadOperation) /]

[template private genReadOperation(aReadOperation : RteBufferNonqueuedReadOperation) ]
[let aExcludeOperation : ExcludeOperation = aReadOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationEnter()/]
[/let]
[aReadOperation.readValueVariable.genValueAccess()/] = [aReadOperation.accessVariable.valueVariable.genValueAccess()/];
[if (not aReadOperation.accessVariable.statusVariable.oclIsUndefined())]
	[if (not aReadOperation.invalidValueConstant.oclIsUndefined())]
		if ([aReadOperation.readValueVariable.genValueAccess()/] == [aReadOperation.invalidValueConstant.genValueAccess()/]) {
			[aReadOperation.readStatusVariable.genValueAccess()/] = ([aReadOperation.accessVariable.statusVariable.genValueAccess()/] | RTE_E_INVALID);
		} 
		else {
			[aReadOperation.readStatusVariable.genValueAccess()/] = [aReadOperation.accessVariable.statusVariable.genValueAccess()/];
		}
	[else]
		[aReadOperation.readStatusVariable.genValueAccess()/] = [aReadOperation.accessVariable.statusVariable.genValueAccess()/];
	[/if]
[else]
	[if (not aReadOperation.invalidValueConstant.oclIsUndefined())]
		if ([aReadOperation.readValueVariable.genValueAccess()/] == [aReadOperation.invalidValueConstant.genValueAccess()/]) {
			[aReadOperation.readStatusVariable.genValueAccess()/] = RTE_E_INVALID;
		}
		else {
			[aReadOperation.readStatusVariable.genValueAccess()/] = RTE_E_OK;
		}
	[else]
		[aReadOperation.readStatusVariable.genValueAccess()/] = RTE_E_OK;
	[/if]
[/if]
[let aExcludeOperation : ExcludeOperation = aReadOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationExit()/]
[/let]
[/template]

[template private genReadOperation(aReadOperation : IocNonqueuedReadOperation) ]
[comment 正常なコンフィギュレーションが行なわれていれば必ず成功するので，戻り値の確認は不要 /]
(void) [aReadOperation.accessApi.symbolName/]([aReadOperation.readValueVariable.genPointerAccess()/]);
[if (not aReadOperation.invalidValueConstant.oclIsUndefined())]
	if ([aReadOperation.readValueVariable.genValueAccess()/] == [aReadOperation.invalidValueConstant.genValueAccess()/]) {
		[aReadOperation.readStatusVariable.genValueAccess()/] = RTE_E_INVALID;
	}
	else {
		[aReadOperation.readStatusVariable.genValueAccess()/] = RTE_E_OK;
	}
[else]
	[aReadOperation.readStatusVariable.genValueAccess()/] = RTE_E_OK;
[/if]
[/template]

[template private genReadOperation(aReadOperation : ComReadOperation) ]
[comment 正常なコンフィギュレーションが行なわれていれば必ず値が取得できるので，戻り値の確認は不要 /]
[if (not aReadOperation.invalidValueConstant.oclIsUndefined())]
	if ([aReadOperation.accessApi.symbolName/]([aReadOperation.accessApi.comSignalSymbolName/], [aReadOperation.readValueVariable.genPointerAccess()/]) == COM_SERVICE_NOT_AVAILABLE) {
		ercd = RTE_E_COM_STOPPED;
	}
	else if ([aReadOperation.readValueVariable.genValueAccess()/] == [aReadOperation.invalidValueConstant.genValueAccess()/]) {
		[aReadOperation.readStatusVariable.genValueAccess()/] = RTE_E_INVALID;
	}
	else {
		[aReadOperation.readStatusVariable.genValueAccess()/] = RTE_E_OK;
	}
[else]
	ercd = RTE_E_OK;
	if ([aReadOperation.accessApi.symbolName/]([aReadOperation.accessApi.comSignalSymbolName/], [aReadOperation.readValueVariable.genPointerAccess()/]) == COM_SERVICE_NOT_AVAILABLE) {
		ercd = RTE_E_COM_STOPPED;
	}
[/if]
[/template]

[template private genReadOperation(aReadOperation : NeverReadOperation) ]
[aReadOperation.readValueVariable.genValueAccess()/] = [aReadOperation.initValueConstant.genValueAccess()/];
[/template]

[template private genReadOperation(aReadOperation : RteBufferQueuedReadOperation) ]
[let aExcludeOperation : ExcludeOperation = aReadOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationEnter()/]
[/let]
Rte_Dequeue([aReadOperation.accessVariable.genPointerAccess()/], [aReadOperation.readValueVariable.genPointerAccess()/], (Std_ReturnType *) [aReadOperation.readStatusVariable.genPointerAccess()/]);
[let aExcludeOperation : ExcludeOperation = aReadOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationExit()/]
[/let]
[/template]

[template private genReadOperation(aReadOperation : IocQueuedReadOperation) ]
[aReadOperation.readStatusVariable.genValueAccess()/] = [aReadOperation.accessApi.symbolName/]([aReadOperation.readValueVariable.genPointerAccess()/]);
if ([aReadOperation.readStatusVariable.genValueAccess()/] == IOC_E_NO_DATA) {
	[aReadOperation.readStatusVariable.genValueAccess()/] = RTE_E_NO_DATA;
}
else if ([aReadOperation.readStatusVariable.genValueAccess()/] == IOC_E_LOST_DATA) {
	[aReadOperation.readStatusVariable.genValueAccess()/] = RTE_E_LOST_DATA;
}
else {
	[aReadOperation.readStatusVariable.genValueAccess()/] = RTE_E_OK;
}
[/template]

[template private genFilterCheck(aFilterOperation : FilterOperation, aValue : Value) /]

[template private genFilterCheck(aFilterOperation : MaskedNewEqualsXFilterOperation, aValue : Value) post(trim())]
(Rte_FilterMaskedNewEqualsX([aValue.genValueAccess()/], [aFilterOperation.mask.genValueAccess()/], [aFilterOperation.x.genValueAccess()/]) == TRUE)
[/template]

[template private genFilterCheck(aFilterOperation : MaskedNewDiffersXFilterOperation, aValue : Value) post(trim())]
(Rte_FilterMaskedNewDiffersX([aValue.genValueAccess()/], [aFilterOperation.mask.genValueAccess()/], [aFilterOperation.x.genValueAccess()/]) == TRUE)
[/template]

[template private genFilterCheck(aFilterOperation : MaskedNewDiffersMaskedOldFilterOperation, aValue : Value) post(trim())]
(Rte_FilterMaskedNewDiffersMaskedOld([aValue.genValueAccess()/], [aFilterOperation.oldValueVariable.genValueAccess()/], [aFilterOperation.mask.genValueAccess()/]) == TRUE)
[/template]

[template private genFilterCheck(aFilterOperation : NewIsWithinFilterOperation, aValue : Value) post(trim())]
(Rte_FilterNewIsWithin([aValue.genValueAccess()/], [aFilterOperation.min.genValueAccess()/], [aFilterOperation.max.genValueAccess()/]) == TRUE)
[/template]

[template private genFilterCheck(aFilterOperation : NewIsOutsideFilterOperation, aValue : Value) post(trim())]
(Rte_FilterNewIsOutside([aValue.genValueAccess()/], [aFilterOperation.min.genValueAccess()/], [aFilterOperation.max.genValueAccess()/]) == TRUE)
[/template]

[template private genFilterCheck(aFilterOperation : OneEveryNFilterOperation, aValue : Value) post(trim())]
(Rte_FilterOneEveryN([aFilterOperation.occurrenceVariable.genValueAccess()/], [aFilterOperation.period.genValueAccess()/], [aFilterOperation.offset.genValueAccess()/]) == TRUE)
[/template]

[template public genInterPartitionTimeoutOperation (aInterPartitionTimeoutOperation : InterPartitionTimeoutOperation) ]
[let aExcludeOperation : ExcludeOperation = aInterPartitionTimeoutOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationEnter()/]
[/let]
[for (aRteBufferVariableSet : RteBufferVariableSet | aInterPartitionTimeoutOperation.timeoutVariable)]
	[aRteBufferVariableSet.statusVariable.genValueAccess()/] = RTE_E_MAX_AGE_EXCEEDED;
[/for]
[let aExcludeOperation : ExcludeOperation = aInterPartitionTimeoutOperation.excludeOperation]
	[aExcludeOperation.genExcludeOperationExit()/]
[/let]
[/template]
