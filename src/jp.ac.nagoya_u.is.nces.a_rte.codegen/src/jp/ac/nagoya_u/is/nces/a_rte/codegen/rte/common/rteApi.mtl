[comment]
/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2015 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 * 
 *  $Id: header.mtl 13333 2015-02-24 03:45:52Z tmori $
 */
[/comment]
[comment encoding = EUC-JP /]
[module rteApi('http://nces.is.nagoya-u.ac.jp/a-rte/rte/module')]

[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::fileUtil /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::symbolUtil /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::operationUtil /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::initializeOperation /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::senderReceiverOperation /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::entityOperation /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::excludeOperation /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::irvOperation /]

[template public genRteApi(aRteApi : RteApi) /]

[template public genRteApi(aRteApi : WriteApi) ? (not aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	return(RTE_E_OK);
}
[/template]

[template public genRteApi(aRteApi : WriteApi) ? (aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	[aRteApi.genLocalVariableDeclarations()/]
	[if (aRteApi.needsCheckArg)]
		[aRteApi.dataParam.genSrApiCheckDeclaration()/]
	[/if]
	[aRteApi.genLocalVariableInitializations()/]

	[if (aRteApi.needsCheckArg)]
		[aRteApi.dataParam.genSrApiCheckOperation()/]
	[/if]
	[for (aSendOperation : SendOperation | aRteApi.operation)]
		[aSendOperation.genSendOperation()/]
	[/for]
	[if (aRteApi.needsCheckArg)]
		[aRteApi.genApiCheckArgErrLabel()/]
	[/if]
	return([aRteApi.returnValue.genValueAccess()/]);
}
[/template]

[template public genRteApi(aRteApi : ReadApi) ? (not aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	[aRteApi.operation.genReadOperation()/]

	return(RTE_E_UNCONNECTED);
}
[/template]

[template public genRteApi(aRteApi : ReadApi) ? (aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	[aRteApi.genLocalVariableDeclarations()/]
	[aRteApi.genLocalVariableInitializations()/]
	[aRteApi.operation.genReadOperation()/]

	return([aRteApi.returnValue.genValueAccess()/]);
}

[/template]

[template private genRteApi(aRteApi : InvalidateApi) ? (not aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	return(RTE_E_OK);
}
[/template]

[template public genRteApi(aRteApi : InvalidateApi) ? (aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	[aRteApi.genLocalVariableDeclarations()/]
	[aRteApi.genLocalVariableInitializations()/]

	[for (aSendOperation : SendOperation | aRteApi.operation)]
		[aSendOperation.genSendOperation()/]
	[/for]
	return([aRteApi.returnValue.genValueAccess()/]);
}
[/template]

[template public genRteApi(aRteApi : SendApi) ? (not aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	return(RTE_E_OK);
}
[/template]

[template public genRteApi(aRteApi : SendApi) ? (aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	[aRteApi.genLocalVariableDeclarations()/]
	[if (aRteApi.needsCheckArg)]
		[aRteApi.dataParam.genSrApiCheckDeclaration()/]
	[/if]
	[aRteApi.genLocalVariableInitializations()/]

	[if (aRteApi.needsCheckArg)]
		[aRteApi.dataParam.genSrApiCheckOperation()/]
	[/if]
	[for (aSendOperation : SendOperation | aRteApi.operation)]
		[aSendOperation.genSendOperation()/]
	[/for]
	[if (aRteApi.needsCheckArg)]
		[aRteApi.genApiCheckArgErrLabel()/]
	[/if]

	return([aRteApi.returnValue.genValueAccess()/]);
}
[/template]

[template public genRteApi(aRteApi : ReceiveApi) ? (not aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	return(RTE_E_UNCONNECTED);
}
[/template]

[template public genRteApi(aRteApi : ReceiveApi) ? (aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	[aRteApi.genLocalVariableDeclarations()/]
	[aRteApi.genLocalVariableInitializations()/]
	[aRteApi.operation.genReadOperation()/]

	return([aRteApi.returnValue.genValueAccess()/]);
}
[/template]

[template public genRteApi(aRteApi : CallApi) ? (not aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	return(RTE_E_UNCONNECTED);
}
[/template]

[template public genRteApi(aRteApi : CallApi) ? (aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	[aRteApi.genLocalVariableDeclarations()/]
	[aRteApi.genLocalVariableInitializations()/]

	[for (aExcludeOperation : ExcludeOperation | aRteApi.operation.rieaExcludeOperation)]
		[aExcludeOperation.genExcludeOperationEnter()/]
	[/for]

	[let paramValues : Sequence(Value) = aRteApi.portArgValue.oclAsType(Value)->addAll(aRteApi.operationParam)]
		[if (aRteApi.operation.startServerRunnable.hasReturnValue)]
			[aRteApi.returnVariable.genValueAccess()/] = [aRteApi.operation.startExecutable.symbolName/]([paramValues.genCsArgAccess()->sep(', ')/]);
		[else]
			[aRteApi.operation.startExecutable.symbolName/]([paramValues.genCsArgAccess()->sep(', ')/]);
		[/if]
	[/let]
	
	[for (aExcludeOperation : ExcludeOperation | aRteApi.operation.rieaExcludeOperation->reverse())]
		[aExcludeOperation.genExcludeOperationExit()/]
	[/for]
	return([aRteApi.returnValue.genValueAccess()/]);
}
[/template]

[template public genRteApi(aRteApi : TfCallApi) ? (aRteApi.isConnected)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	Std_ReturnType ercd;
	Std_ReturnType tmp_ercd;
	[aRteApi.csTfParamTypeName/] tfn_prm;
	[for (aValue : Value | aRteApi.portArgValue)]
		[if (aValue.oclIsKindOf(Constant) and (aValue.oclAsType(Constant).type.oclIsKindOf(PrimitiveType) or aValue.oclAsType(Constant).type.oclIsKindOf(PointerType)))]
			[aValue.oclAsType(Constant).type.symbolName/] value_[aValue.oclAsType(Constant).symbolName/];
		[/if]
	[/for]
	void *argv['['/][aRteApi.csTfArgcConstantName/][']'/];
	[if (aRteApi.needsCheckArg)]
		RTE_DECLARE_TASK_ID(taskId);
		RTE_GET_TASK_ID(taskId); /* MISRA RULE 14.4 VIOLATION: use "goto" for simplification */
	[/if]
	[for (aParam : Parameter | aRteApi.param)]
		[if ((aParam.type.oclIsKindOf(PointerType) and aParam.direction = ParameterDirectionEnum::_'in'))]
			RTE_CHECK_ARG_POINTER_IN(taskId, [aParam.symbolName/], [aParam.type.symbolName/]); /* MISRA RULE 14.4 VIOLATION: use "goto" for simplification */
		[elseif ((aParam.type.oclIsKindOf(PointerType) and aParam.direction <> ParameterDirectionEnum::_'in'))]
			RTE_CHECK_ARG_POINTER_INOUT_OR_OUT(taskId, [aParam.symbolName/], [aParam.type.symbolName/]); /* MISRA RULE 14.4 VIOLATION: use "goto" for simplification */
		[elseif ((not aParam.type.oclIsKindOf(PrimitiveType) and aParam.direction = ParameterDirectionEnum::_'in'))]
			RTE_CHECK_ARG_IN(taskId, [aParam.symbolName/], [aParam.type.symbolName/]); /* MISRA RULE 14.4 VIOLATION: use "goto" for simplification */
		[elseif ((not aParam.type.oclIsKindOf(PrimitiveType) and aParam.direction <> ParameterDirectionEnum::_'in'))]
			RTE_CHECK_ARG_INOUT_OR_OUT(taskId, [aParam.symbolName/], [aParam.type.symbolName/]); /* MISRA RULE 14.4 VIOLATION: use "goto" for simplification */
		[/if]
	[/for]
	[for (aValue : Value | aRteApi.portArgValue)]
		[if (aValue.oclIsKindOf(Constant) and (aValue.oclAsType(Constant).type.oclIsKindOf(PrimitiveType) or aValue.oclAsType(Constant).type.oclIsKindOf(PointerType)))]
			value_[aValue.oclAsType(Constant).symbolName/] = [aValue.oclAsType(Constant).genValueAccess()/];[if aValue.oclAsType(Constant).type.oclIsKindOf(PointerType)] /* MISRA RULE 3.1 11.3 VIOLATION : It won't be fixed because of RTE Specification rte_sws_1360 */[/if]
			argv['['/][i - 1/][']'/] = (void *)&value_[aValue.oclAsType(Constant).symbolName/];
		[else]
			argv['['/][i - 1/][']'/] = (void *)[aValue.genPointerAccess()/]; /* MISRA RULE 11.5 VIOLATION : It is safe because the variable is managed by RTE codes */
		[/if]
	[/for]
	[for (aParam : Parameter | aRteApi.param)]
		argv['['/][aRteApi.portArgValue->size() + i - 1/][']'/] = (void *)[aParam.genPointerAccess()/]; [if (aParam.hasConst)]/* MISRA RULE 11.5 VIOLATION : It is safe because the variable is managed by RTE codes */[/if]
	[/for]
	tfn_prm.tf_opid = [aRteApi.csTfOpidConstantName/];
	tfn_prm.tf_argv = &argv['['/]0[']'/];
	tmp_ercd = Rte_Call_Bsw_CallTrustedFunction([aRteApi.csTfName/], (TrustedFunctionParameterRefType) (&tfn_prm));
	if (tmp_ercd != E_OK) {
		ercd = RTE_E_DEV_DEFECT;
	}
	else {
		ercd = tfn_prm.tf_ercd;
	}
	[if (aRteApi.needsCheckArg)]
		[aRteApi.genApiCheckArgErrLabel()/]
	[/if]
	return(ercd);
}
[/template]

[template public genRteApi(aRteApi : RteEnterApi) ]
[if (not aRteApi.isNoneExclude)]
	[aRteApi.returnType.symbolName/]
	[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
	{
		[aRteApi.operation.genExcludeOperationEnter()/]
	}
[/if]
[/template]

[template public genRteApi(aRteApi : RteExitApi) ]
[if (not aRteApi.isNoneExclude)]
	[aRteApi.returnType.symbolName/]
	[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
	{
		[aRteApi.operation.genExcludeOperationExit()/]
	}
[/if]
[/template]

[template public genRteApi(aRteApi : IrvWriteApi)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	[aRteApi.operation.genIrvWriteOperation()/]
}
[/template]

[template public genRteApi(aRteApi : IrvReadApi)]
[aRteApi.returnType.symbolName/]
[aRteApi.symbolName/]([aRteApi.genFunctionParams()/])
{
	[aRteApi.operation.genIrvReadOperation()/]
}
[/template]

[template private genSrApiCheckDeclaration(aSrDataParam : Parameter) ]
RTE_DECLARE_TASK_ID(taskId);
[/template]

[template private genSrApiCheckOperation(aSrDataParam : Parameter) ]
RTE_GET_TASK_ID(taskId); /* MISRA RULE 14.4 VIOLATION: use "goto" for simplification */
[if (aSrDataParam.type.oclIsKindOf(PointerType)) ]
	RTE_CHECK_ARG_POINTER_IN(taskId, [aSrDataParam.genValueAccess()/], [aSrDataParam.type.symbolName/]); /* MISRA RULE 14.4 VIOLATION: use "goto" for simplification */
[elseif (not aSrDataParam.type.oclIsKindOf(PrimitiveType))]
	RTE_CHECK_ARG_IN(taskId, [aSrDataParam.genValueAccess()/], [aSrDataParam.type.symbolName/]); /* MISRA RULE 14.4 VIOLATION: use "goto" for simplification */
[/if]
[/template]

[template private genApiCheckArgErrLabel(aRteApi : RteApi) ]
err_return:
[/template]
