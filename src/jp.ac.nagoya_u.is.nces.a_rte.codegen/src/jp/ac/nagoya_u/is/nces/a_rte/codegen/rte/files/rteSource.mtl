[comment]
/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2015 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 * 
 *  $Id: header.mtl 13333 2015-02-24 03:45:52Z tmori $
 */
[/comment]
[comment encoding = EUC-JP /]
[module rteSource('http://nces.is.nagoya-u.ac.jp/a-rte/rte/module')]

[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::rteApi /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::schmApi /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::fileUtil /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::symbolUtil /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::operationUtil /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::initializeOperation /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::senderReceiverOperation /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::entityOperation /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::excludeOperation /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::irvOperation /]

[comment]
ファイル内容定義
[/comment]
[**
 * RTEソースコードのテンプレート
 * @param aRteSource RTEソースコードモデル
 */]
[template public genRteSource(aRteSource : RteSource)]
[file (aRteSource.fileName, false, 'ASCII')]
	[aRteSource.genFileHeader()/]

	[aRteSource.genSourceMacroDefinitions()/]

	[aRteSource.genFileIncludes()/]

	[aRteSource.genGlobalVariableDefinitions()/]

	[aRteSource.genRteApiDefinitions()/]

	[aRteSource.genSignalGroupFunctions()/]

	[aRteSource.genProxyGroupFunctions()/]

	[aRteSource.genRteLifecycleApiDefinitions()/]

	[aRteSource.genRteComCallbackDefinitions()/]

	[aRteSource.genTrustedFunctionDefinitions()/]

	[aRteSource.genSchmApiDefinitions()/]

	[aRteSource.genSchmLifecycleApiDefinitions()/]

	[aRteSource.genBswSchedulableEntityDefinitions()/]

	[aRteSource.genTaskBodyDefinition()/]

	[aRteSource.genFileFooter()/]
[/file]
[/template]

[template private genFileHeader (aRteSource : RteSource) ]
[aRteSource.genFileHeaderComment()/]
[/template]

[template private genFileFooter (aRteSource : RteSource) ]
[/template]

[comment]
ソース固有のマクロ定義
[/comment]
[template private genSourceMacroDefinitions (aRteSource : RteSource) ]
[for (aMacro : Macro | aRteSource.sourceMacro)]
	[aMacro.genMacroDefinition()/]
[/for]
[/template]

[comment]
グローバル変数の定義
[/comment]
[template private genGlobalVariableDefinitions (aRteSource : RteSource) ]
/*
 * Global Variable Definitions
 */
[for (aGroup : GlobalVariableGroup | aRteSource.globalVariableGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aGlobalVariable : GlobalVariable | aGroup.globalVariable)]
		[aGlobalVariable.genGlobalVariableDefinition()/]
	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[template private genGlobalVariableDefinition(aGlobalVariable : RteBufferQueuedVariable) post (trim())]
[aGlobalVariable.type.genTypePartOfVariableDeclaration()/] [aGlobalVariable.symbolName/][if (aGlobalVariable.initAtDefinition)] = { 0U, 0U, RTE_QUEUE_STATUS_NORMAL, { 0U } }[/if];
[/template]

[comment]
RTEライフサイクルAPIの定義
[/comment]
[template private genRteLifecycleApiDefinitions (aRteSource : RteSource) ]
/*
 * RTE Lifecycle API Definitions
 */
[for (aGroup : RteLifecycleApiGroup | aRteSource.rteLifecycleApiGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aRteLifecycleApi : RteLifecycleApi | aGroup.rteLifecycleApi)]
		[aRteLifecycleApi.genRteLifecycleApi()/]

	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[template private genRteLifecycleApi(aRteLifecycleApi : RteLifecycleApi) /]

[template private genRteLifecycleApi(aRteLifecycleApi : SinglecoreRteStartApi) ]
[aRteLifecycleApi.returnType.symbolName/]
[aRteLifecycleApi.symbolName/]([aRteLifecycleApi.genFunctionParams()/])
{
	[for (aInitializeOperation : InitializeOperation | aRteLifecycleApi.operation)]
		[aInitializeOperation.genInitializeOperation()/]
	[/for]
	return(RTE_E_OK);
}
[/template]

[template private genRteLifecycleApi(aRteLifecycleApi : MulticoreRteStartApi) ]
[aRteLifecycleApi.returnType.symbolName/]
[aRteLifecycleApi.symbolName/]([aRteLifecycleApi.genFunctionParams()/])
{
	Std_ReturnType ercd;

	switch (GetCoreID()) {
	[for (aRteCoreStartApiImpl : RteCoreStartApiImpl | aRteLifecycleApi.coreStartApiImpl)]
		case ((CoreIdType) [aRteCoreStartApiImpl.parent.coreId/]):
			ercd = [aRteCoreStartApiImpl.symbolName/]();
			break;
	[/for]
	default:
		ercd = RTE_E_OK;
		break;
	}
	return(ercd);
}
[/template]

[template private genRteLifecycleApi(aRteLifecycleApi : RteCoreStartApiImpl) ]
[aRteLifecycleApi.returnType.symbolName/]
[aRteLifecycleApi.symbolName/]([aRteLifecycleApi.genFunctionParams()/])
{
	[for (aInitializeOperation : InitializeOperation | aRteLifecycleApi.operation)]
		[aInitializeOperation.genInitializeOperation()/]
	[/for]
	return(RTE_E_OK);
}
[/template]

[template private genRteLifecycleApi(aRteLifecycleApi : RteStopApi) ]
[aRteLifecycleApi.returnType.symbolName/]
[aRteLifecycleApi.symbolName/]([aRteLifecycleApi.genFunctionParams()/])
{
	return(RTE_E_OK);
}
[/template]

[template private genRteLifecycleApi(aRteLifecycleApi : RestartPartitionApi) ]
[aRteLifecycleApi.returnType.symbolName/]
[aRteLifecycleApi.symbolName/]([aRteLifecycleApi.genFunctionParams()/])
{
	[for (aInitializeOperation : InitializeOperation | aRteLifecycleApi.operation)]
		[aInitializeOperation.genInitializeOperation()/]
	[/for]
	return(RTE_E_OK);
}
[/template]

[template private genRteLifecycleApi(aRteLifecycleApi : PartitionRestartingApi) ]
[aRteLifecycleApi.returnType.symbolName/]
[aRteLifecycleApi.symbolName/]([aRteLifecycleApi.genFunctionParams()/])
{
	[let aInterPartitionTimeoutOperation : InterPartitionTimeoutOperation = aRteLifecycleApi.operation]
		[aInterPartitionTimeoutOperation.genInterPartitionTimeoutOperation()/]
	[/let]
}
[/template]

[template private genRteLifecycleApi(aRteLifecycleApi : PartitionTerminatedApi) ]
[aRteLifecycleApi.returnType.symbolName/]
[aRteLifecycleApi.symbolName/]([aRteLifecycleApi.genFunctionParams()/])
{
	[let aInterPartitionTimeoutOperation : InterPartitionTimeoutOperation = aRteLifecycleApi.operation]
		[aInterPartitionTimeoutOperation.genInterPartitionTimeoutOperation()/]
	[/let]
}
[/template]

[comment]
BSWスケジューラ ライフサイクルAPIの定義
[/comment]
[template private genSchmLifecycleApiDefinitions (aRteSource : RteSource) ]
/*
 * Basic Software Scheduler Lifecycle API Definitions
 */
[for (aGroup : SchmLifecycleApiGroup | aRteSource.schmLifecycleApiGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aSchmLifecycleApi : SchmLifecycleApi | aGroup.schmLifecycleApi)]
		[aSchmLifecycleApi.genSchmLifecycleApi()/]

	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[template private genSchmLifecycleApi(aSchmLifecycleApi : SchmLifecycleApi) /]

[template private genSchmLifecycleApi(aSchmLifecycleApi : SinglecoreSchmInitApi) ]
	[aSchmLifecycleApi.genSchmInitApi()/]
[/template]

[template private genSchmLifecycleApi(aSchmLifecycleApi : MulticoreSchmInitApi) ]
[aSchmLifecycleApi.returnType.symbolName/]
[aSchmLifecycleApi.symbolName/]([aSchmLifecycleApi.genFunctionParams()/])
{
	switch (GetCoreID()) {
	[for (aSchmCoreInitApiImpl : SchmCoreInitApiImpl | aSchmLifecycleApi.coreInitApiImpl)]
		case ((CoreIdType) [aSchmCoreInitApiImpl.parent.coreId/]):
			[aSchmCoreInitApiImpl.symbolName/]();
			break;
	[/for]
	default:
		break;
	}
}
[/template]

[template private genSchmLifecycleApi(aSchmLifecycleApi : SchmCoreInitApiImpl) ]
	[aSchmLifecycleApi.genSchmInitApi()/]
[/template]

[template private genSchmInitApi(aSchmLifecycleApi : SchmInitApi) ]
[aSchmLifecycleApi.returnType.symbolName/]
[aSchmLifecycleApi.symbolName/]([aSchmLifecycleApi.genFunctionParams()/])
{
	[for (aInitializeOperation : InitializeOperation | aSchmLifecycleApi.operation)]
		[aInitializeOperation.genInitializeOperation()/]
	[/for]
	[for (aModeMachineInstane : ModeMachineInstance | aSchmLifecycleApi.modeMachineInstance)]
		[aModeMachineInstane.currentModeVariable.symbolName/] = [aModeMachineInstane.initModeConstant.symbolName/];
		[aModeMachineInstane.nextModeVariable.symbolName/] = [aModeMachineInstane.initModeConstant.symbolName/];
		SchM_SwitchMode_Initqueue([aModeMachineInstane.modeQueue.symbolName/]);
	[/for]
	[for (aExecutableStartOperation : ModeSwitchTriggeringExecutableStartOperation | aSchmLifecycleApi.executableStartOperation) ]
		[aExecutableStartOperation.genDoExecutableStartOperation() /]
	[/for]

	[for (aOsTaskEvent : OsTaskEvent | aSchmLifecycleApi.osTaskEvent ) ]
		[if (aOsTaskEvent.taskIdEvents = '') ]
			(void) Rte_Call_Bsw_ActivateTask([aOsTaskEvent.taskId /]);
		[else]
			(void) Rte_Call_Bsw_SetEvent([aOsTaskEvent.taskId /], [aOsTaskEvent.taskIdEvents /]);
		[/if]
	[/for]
}
[/template]

[template private genSchmLifecycleApi(aSchmLifecycleApi : SchmDeinitApi) ]
[aSchmLifecycleApi.returnType.symbolName/]
[aSchmLifecycleApi.symbolName/]([aSchmLifecycleApi.genFunctionParams()/])
{
}
[/template]

[comment]
タスクボディの定義
[/comment]
[template private genTaskBodyDefinition (aRteSource : RteSource) ]
/*
 * TaskBody Definitions
 */
[for (aGroup : TaskBodyGroup | aRteSource.taskBodyGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aTaskBody : TaskBody | aGroup.taskBody)]
		[aTaskBody.genTaskBody()/]

	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[template private genTaskBody(aTaskBody : TaskBody) /]

[template private genTaskBody(aTaskBody : OsTaskActivationExecutableTaskBody) ]
[aTaskBody.symbolName/]
{
	[aTaskBody.genLocalVariableDeclarations()/]

	[aTaskBody.operation.genContextActivationOperation()/]
	(void) Rte_Call_Bsw_TerminateTask();
}
[/template]
[template private genTaskBody(aTaskBody : OsEventSetExecutableTaskBody) ]
[aTaskBody.symbolName/]
{
	[aTaskBody.genLocalVariableDeclarations()/]
	while (1) {
		Rte_InternalTraceTaskLoopStart(); /* MISRA RULE 14.2 VIOLATION : It is safe because the macro is only defined for RTE test codes */
		(void) Rte_Call_Bsw_WaitEvent([aTaskBody.osEventId->sep(' | ')/]);
		[if (aTaskBody.checksOsEventId)]
			(void) Rte_Call_Bsw_GetEvent([aTaskBody.osTaskId/], [aTaskBody.eventVariable.genPointerAccess()/]);
			(void) Rte_Call_Bsw_ClearEvent([aTaskBody.eventVariable.genValueAccess()/]);
		[else]
			(void) Rte_Call_Bsw_ClearEvent([aTaskBody.osEventId->sep(' | ')/]);
		[/if]
		[for (aOsEventSetActivationOperation : OsEventSetActivationOperation | aTaskBody.operation)]
			[if (aTaskBody.checksOsEventId)]
				if (([aTaskBody.eventVariable.genValueAccess()/] & [aOsEventSetActivationOperation.activationOsEventId/]) != 0U) {
					[aOsEventSetActivationOperation.genContextActivationOperation()/]
				}
			[else]
				[aOsEventSetActivationOperation.genContextActivationOperation()/]
			[/if]
		[/for]
		Rte_InternalTraceTaskLoopEnd(); /* MISRA RULE 14.2 VIOLATION : It is safe because the macro is only defined for RTE test codes */
	}
	(void) Rte_Call_Bsw_TerminateTask();
}
[/template]

[template private genTaskBody(aTaskBody : ComSendSignalImmediateTaskBody) ]
[aTaskBody.symbolName/]
{
	while (1) {
		Rte_InternalTraceTaskLoopStart(); /* MISRA RULE 14.2 VIOLATION : It is safe because the macro is only defined for RTE test codes */
	    (void) Rte_Call_Bsw_WaitEvent([aTaskBody.osEventId/]);
	    (void) Rte_Call_Bsw_ClearEvent([aTaskBody.osEventId/]);
		[aTaskBody.startEntity.symbolName/]();
		Rte_InternalTraceTaskLoopEnd(); /* MISRA RULE 14.2 VIOLATION : It is safe because the macro is only defined for RTE test codes */
	}
	(void) Rte_Call_Bsw_TerminateTask();
}
[/template]

[comment]
信頼関数の定義
[/comment]
[template private genTrustedFunctionDefinitions (aRteSource : RteSource) ]
/*
 * TrustedFunction Definitions
 */
[for (aGroup : TrustedFunctionGroup | aRteSource.trustedFunctionGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aTrustedFunction : TrustedFunction | aGroup.trustedFunction)]
		[aTrustedFunction.genTrustedFunction()/]

	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[template private genTrustedFunction(aTrustedFunction : TrustedFunction) /]

[template private genTrustedFunction(aTrustedFunction : ComSendSignalTrustedFunction) ]
[aTrustedFunction.returnType.symbolName/]
[aTrustedFunction.symbolName/]([aTrustedFunction.genFunctionParams()/]) /* MISRA RULE 16.7 VIOLATION : It can't be fixed because the type(TrustedFunctionParameterRefType) is a pointer typedef */
{
	[aTrustedFunction.localVariable.type.symbolName/] *p_tfn_prm = ([aTrustedFunction.localVariable.type.symbolName/] *) tfn_prm; /* MISRA RULE 11.4 VIOLATION : It is safe because the argument variable(tfn_prm) is passed from RTE codes */
	p_tfn_prm->ercd = [aTrustedFunction.signalGroupSymbolName/]([if (aTrustedFunction.isGroup)]p_tfn_prm->meta, (const uint8*)p_tfn_prm->com_data[else]p_tfn_prm->com_sig_id, p_tfn_prm->com_data[/if]);
	if (p_tfn_prm->ercd == E_OK) {
		/* Nothing to do */
	}
	else if (p_tfn_prm->ercd == COM_SERVICE_NOT_AVAILABLE) {
		p_tfn_prm->ercd = RTE_E_COM_STOPPED;
	}
	else {
		p_tfn_prm->ercd = RTE_E_DEV_DEFECT;	
	}
	return(E_OK);
}
[/template]

[template private genTrustedFunction(aTrustedFunction : RteBufferWriteTrustedFunction) ]
[aTrustedFunction.returnType.symbolName/]
[aTrustedFunction.symbolName/]([aTrustedFunction.genFunctionParams()/]) /* MISRA RULE 16.7 VIOLATION : It can't be fixed because the type(TrustedFunctionParameterRefType) is a pointer typedef */
{
[if (aTrustedFunction.operation.oclIsKindOf(RteBufferQueuedSendOperation))]
	Rte_SendTrustedFunctionParamType *p_tfn_prm = (Rte_SendTrustedFunctionParamType *) tfn_prm; /* MISRA RULE 11.4 VIOLATION : It is safe because the argument variable(tfn_prm) is passed from RTE codes */
	[aTrustedFunction.operation.genTrustedSendOperation()/]
[elseif (aTrustedFunction.operation.oclIsKindOf(RteBufferNonqueuedSendOperation))]
	[if (aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.type.oclIsKindOf(PrimitiveType) or aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.type.oclIsKindOf(PointerType))]
		[aTrustedFunction.genLocalVariableDeclarations()/]
	
		[aTrustedFunction.dataVariable.genValueAccess()/] = *(([aTrustedFunction.dataVariable.type.symbolName/] *) tfn_prm); /* MISRA RULE 11.4 VIOLATION : It is safe because the argument variable(tfn_prm) is passed from RTE codes */
	
		[aTrustedFunction.operation.genSendOperation()/]
	[else]
		[let aExcludeOperation : ExcludeOperation = aTrustedFunction.operation.excludeOperation]
			[aExcludeOperation.genExcludeOperationEnter()/]
		[/let]
		[if (aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.type.oclIsKindOf(ArrayType))]
			Rte_ArrayMemcpy([aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.symbolName/], ([aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.type.originalTypeSymbolName/] *)tfn_prm, [aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.type.symbolName/]);
		[elseif (aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.type.oclIsKindOf(StructType))]
			Rte_StructMemcpy(&[aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.symbolName/], tfn_prm, [aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.type.symbolName/]);
		[elseif (aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.type.oclIsKindOf(UnionType))]
			Rte_UnionMemcpy(&[aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.symbolName/], tfn_prm, [aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.valueVariable.type.symbolName/]);
		[/if]
		[if (not aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.statusVariable.oclIsUndefined())]
			[aTrustedFunction.operation.oclAsType(RteBufferNonqueuedSendOperation).accessVariable.statusVariable.symbolName/] = [aTrustedFunction.operation.sendStatus.genValueAccess()/];
		[/if]
		[let aExcludeOperation : ExcludeOperation = aTrustedFunction.operation.excludeOperation]
			[aExcludeOperation.genExcludeOperationExit()/]
		[/let]
	[/if]
[/if]

	return(E_OK);
}
[/template]

[template private genTrustedFunction(aTrustedFunction : RteBufferInvalidateTrustedFunction) ]
[aTrustedFunction.returnType.symbolName/]
[aTrustedFunction.symbolName/]([aTrustedFunction.genFunctionParams()/]) /* MISRA RULE 16.7 VIOLATION : It can't be fixed because the type(TrustedFunctionParameterRefType) is a pointer typedef */
{	
	[aTrustedFunction.genLocalVariableDeclarations()/]

	[aTrustedFunction.operation.genSendOperation()/]

	return(E_OK);
}
[/template]

[template private genTrustedFunction(aTrustedFunction : RteCsTrustedFunction) ]
[aTrustedFunction.returnType.symbolName/]
[aTrustedFunction.symbolName/]([aTrustedFunction.genFunctionParams()/]) /* MISRA RULE 16.7 VIOLATION : It can't be fixed because the type(TrustedFunctionParameterRefType) is a pointer typedef */
{
	[aTrustedFunction.csArgsTrustedFunctionParamTypeName/] *p_tfn_prm = ([aTrustedFunction.csArgsTrustedFunctionParamTypeName/] *) tfn_prm; /* MISRA RULE 11.4 VIOLATION : It is safe because the argument variable(tfn_prm) is passed from RTE codes */
	switch (p_tfn_prm->opid) {	
		[for (aRteCsTrustedRunnables : RteCsTrustedRunnables | aTrustedFunction.rteCsTrustedRunnables)]
		case ((uint32)[aRteCsTrustedRunnables.rteCallOpidName/]):
			[if (aRteCsTrustedRunnables.isReturn)]
				p_tfn_prm->ercd = [aRteCsTrustedRunnables.serverRunnableName/]([aRteCsTrustedRunnables.genFunctionRunnableParams()/]);
			[else]
				p_tfn_prm->ercd = RTE_E_OK; 
				[aRteCsTrustedRunnables.serverRunnableName/]([aRteCsTrustedRunnables.genFunctionRunnableParams()/]);
			[/if]
			break;
		[/for]
		default:
			break;
	}
	return(E_OK);
}
[/template]

[comment]
RTE APIの定義
[/comment]
[template private genRteApiDefinitions (aRteSource : RteSource) ]
/*
 * RTE API Implementation Function Definitions
 */
[for (aGroup : RteApiGroup | aRteSource.rteApiGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aRteApi : RteApi | aGroup.rteApi)]
		[if not (aRteApi.isInline)][aRteApi.genRteApi()/][/if]

	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[comment]
SIGNAL GROUP関数の定義
[/comment]
[template private genSignalGroupFunctions (aRteSource : RteSource) ]
/*
 * Signal Group Functions
 */
[for (aGroup : SignalApiGroup | aRteSource.signalApiGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aSignalApi : SignalApi | aGroup.signalApi)]
		[aSignalApi.genSignalApi()/]

	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[template private genSignalApi(aSignalApi : SignalApi) /]

[template private genSignalApi (aSignalApi : ReceiveSignalApi) ]
uint8
[aSignalApi.symbolName/]([aSignalApi.genSignalApiParams()/])
{
	uint32 inx;
	[aSignalApi.returnType.symbolName/] ercd;
	[aSignalApi.returnType.symbolName/] tmp_ercd;
	ercd = E_OK;
	tmp_ercd  = [aSignalApi.signalGroupSymbolName/]([aSignalApi.param->at(1).symbolName/]->com_sig_gid);
	if (tmp_ercd == E_OK) {
		for (inx  =  0U; inx < [aSignalApi.param->at(1).symbolName/]->com_sig_id_cnt; inx++) {
			(void)[aSignalApi.signalSymbolName/]([aSignalApi.param->at(1).symbolName/]->com_sig_id['['/]inx[']'/], &[aSignalApi.param->at(2).symbolName/]['['/][aSignalApi.param->at(1).symbolName/]->offset['['/]inx[']]'/]);
		}
	} else if (tmp_ercd == COM_SERVICE_NOT_AVAILABLE) {
		ercd = RTE_E_COM_STOPPED;
	} else {
		ercd = RTE_E_DEV_DEFECT;
	}
	return(ercd);
}
[/template]

[template private genSignalApi (aSignalApi : SendSignalApi) ]
uint8
[aSignalApi.symbolName/]([aSignalApi.genSignalApiParams()/])
{
	uint32 inx;
	for (inx  =  0U; inx < [aSignalApi.param->at(1).symbolName/]->com_sig_id_cnt; inx++) {
		(void)[aSignalApi.signalSymbolName/]([aSignalApi.param->at(1).symbolName/]->com_sig_id['['/]inx[']'/], &[aSignalApi.param->at(2).symbolName/]['['/][aSignalApi.param->at(1).symbolName/]->offset['['/]inx[']]'/]);
	}
	return([aSignalApi.signalGroupSymbolName/]([aSignalApi.param->at(1).symbolName/]->com_sig_gid));
}
[/template]

[comment]
PROXY GROUP関数の定義
[/comment]
[template private genProxyGroupFunctions (aRteSource : RteSource) ]
/*
 * Proxy Group Functions
 */
[for (aGroup : ProxyApiGroup | aRteSource.proxyApiGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aProxyApi : ProxyApi | aGroup.proxyApi)]
		[aProxyApi.genProxyApi()/]

	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[template private genProxyApi(aProxyApi : ProxyApi) ]
void
[aProxyApi.symbolName/](void) /* MISRA RULE 8.8 VIOLATION : It won't be fixed because of RTE Specification rte_sws_1006 */
{
	Std_ReturnType ercd;
	[aProxyApi.proxyDataTypeName/] *proxy_data = ([aProxyApi.proxyDataTypeName/]*)(&[aProxyApi.bufferComProxySymbolName/]);
	ercd = [aProxyApi.iocReceiveSymbolName/](proxy_data);
	if (ercd == IOC_E_OK || ercd == IOC_E_LOST_DATA) {
		[if (aProxyApi.isGroup)]
			[aProxyApi.signalGroupSymbolName/]((&[aProxyApi.bufferComMetaComplexDataSymbolName/]), (const uint8*)proxy_data);
		[else]
			[aProxyApi.signalGroupSymbolName/]([aProxyApi.bufferComMetaComplexDataSymbolName/], proxy_data);
		[/if]
	}
}
[/template]

[comment]
RTE COMコールバックの定義
[/comment]
[template private genRteComCallbackDefinitions (aRteSource : RteSource) ]
/*
 * COM Callback Definitions
 */
[for (aGroup : ComCallbackGroup | aRteSource.comCallbackGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aComCallback : ComCallback | aGroup.comCallback)]
		[aComCallback.genComCallback()/]

	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[template private genComCallback(aComCallback : ComCallback) /]

[template private genComCallback(aComCallback : ComReceiveCallback) ]
[aComCallback.returnType.symbolName/]
[aComCallback.symbolName/]([aComCallback.genFunctionParams()/])
{
	[aComCallback.genLocalVariableDeclarations()/]
	[if (aComCallback.dataVariable.type.oclIsKindOf(StructType) or aComCallback.dataVariable.type.oclIsKindOf(UnionType))]
	(void) [aComCallback.accessApi.symbolName/](&[aComCallback.accessApi.comSignalSymbolName/], (uint8*)[aComCallback.dataVariable.genPointerAccess()/]);
	[else]
	(void) [aComCallback.accessApi.symbolName/]([if (aComCallback.accessApi.isSignalGroup)]&[/if][aComCallback.accessApi.comSignalSymbolName/], [if (aComCallback.accessApi.isSignalGroup)](uint8*)[/if][aComCallback.dataVariable.genPointerAccess()/]);
	[/if]
	[for (aSendOperation : SendOperation | aComCallback.operation)]
			[aSendOperation.genSendOperation()/]
	[/for]
}
[/template]

[template private genComCallback(aComCallback : ComReceiveTimeoutCallback) ]
[aComCallback.returnType.symbolName/]
[aComCallback.symbolName/]([aComCallback.genFunctionParams()/])
{
	[aComCallback.genLocalVariableDeclarations()/]
	[if (aComCallback.dataVariable.type.oclIsKindOf(StructType) or aComCallback.dataVariable.type.oclIsKindOf(UnionType))]
	(void) [aComCallback.accessApi.symbolName/](&[aComCallback.accessApi.comSignalSymbolName/], (uint8*)[aComCallback.dataVariable.genPointerAccess()/]);
	[else]
	(void) [aComCallback.accessApi.symbolName/]([if (aComCallback.accessApi.isSignalGroup)]&[/if][aComCallback.accessApi.comSignalSymbolName/], [if (aComCallback.accessApi.isSignalGroup)](uint8*)[/if][aComCallback.dataVariable.genPointerAccess()/]);
	[/if]
	[for (aSendOperation : SendOperation | aComCallback.operation)]
			[aSendOperation.genSendOperation()/]
	[/for]
}
[/template]

[template private genComCallback(aComCallback : ComInvalidateCallback) ]
[aComCallback.returnType.symbolName/]
[aComCallback.symbolName/]([aComCallback.genFunctionParams()/])
{
	[aComCallback.genLocalVariableDeclarations()/]
	[for (aSendOperation : SendOperation | aComCallback.operation)]
			[aSendOperation.genSendOperation()/]
	[/for]
}
[/template]

[comment]
BSWスケジューラ APIの定義
[/comment]
[template private genSchmApiDefinitions (aRteSource : RteSource) ]
/*
 * Basic Software Scheduler API Implementation Function Definitions
 */
[for (aGroup : SchmApiGroup | aRteSource.schmApiGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]
	[for (aSchmApi : SchmApi | aGroup.schmApi)]
		[aSchmApi.genSchmApi ()/]

	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[comment]
BSWスケジューラブルエンティティの定義
[/comment]
[template private genBswSchedulableEntityDefinitions (aRteSource : RteSource) ]
/*
 * BSW SchedulableEntity Definitions
 */
[for (aGroup : BswSchedulableEntityGroup | aRteSource.bswSchedulableEntityGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aBswSchedulableEntity : BswSchedulableEntity | aGroup.bswSchedulableEntity)]
		[aBswSchedulableEntity.genBswSchedulableEntity()/]

	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[template private genBswSchedulableEntity (aBswSchedulableEntity : BswSchedulableEntity) /]

[template private genBswSchedulableEntity (aBswSchedulableEntity : ComSendSignalProxyEntity) ]
[aBswSchedulableEntity.returnType.symbolName/]
[aBswSchedulableEntity.symbolName/]([aBswSchedulableEntity.genFunctionParams()/])
{
	[aBswSchedulableEntity.genLocalVariableDeclarations()/]
	[for (aProxyOperation : ComSendProxyOperation | aBswSchedulableEntity.operation)]
		while (1) {
			ercd = [aProxyOperation.accessApi.symbolName/]([aProxyOperation.signalIdVariable.genPointerAccess()/], [aProxyOperation.readValueVariable.genPointerAccess()/]);
			if ((ercd == IOC_E_OK) || (ercd == IOC_E_LOST_DATA)) {
		        (void) [aProxyOperation.accessApi.comSendSignalSymbolName/]([aProxyOperation.signalIdVariable.genValueAccess()/], [aProxyOperation.readValueVariable.genPointerAccess()/]);
			} else {
				break;
			}
		}
	[/for]

	[for (aProxyOperation : ComSendProxyComplexOperation | aBswSchedulableEntity.complexOperation)]
		while (1) {
			ercd = [aProxyOperation.accessApi.symbolName/]([aProxyOperation.tableIndexVariable.genPointerAccess()/]);
			if ((ercd == IOC_E_OK) || (ercd == IOC_E_LOST_DATA)) {
		        (void) [aProxyOperation.functionTableSymbolName/]['['/][aProxyOperation.tableIndexVariable.symbolName/][']'/]();
			} else {
				break;
			}
		}
	[/for]
}
[/template]
