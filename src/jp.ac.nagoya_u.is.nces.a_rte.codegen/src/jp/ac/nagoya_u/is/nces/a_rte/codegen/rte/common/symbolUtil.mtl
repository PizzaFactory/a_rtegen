[comment]
/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2014 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 * 
 *  $Id: header.mtl 7578 2014-03-17 03:29:22Z tmori $
 */
[/comment]
[comment encoding = EUC-JP /]
[module symbolUtil('http://nces.is.nagoya-u.ac.jp/a-rte/rte/module')]

[template public genMacroDefinition(aMacro : Macro) post (trim())]
#define [aMacro.symbolName/]
[/template]

[template public genFunctionDeclaration(aFunction : Function) post (trim())]
extern [aFunction.returnType.symbolName/]	[aFunction.symbolName/]([aFunction.genFunctionParams()/]);
[/template]

[template public genFunctionParams(aFunction : Function) post (trim())]
[if (aFunction.param->isEmpty())]
	void
[else]
	[aFunction.param.genFunctionParam()->sep(', ')/]
[/if]
[/template]

[template private genFunctionParam(aParam : Parameter) post (trim())]
[if (aParam.passType = ParameterPassTypeEnum::value)]
	[aParam.type.symbolName/] [aParam.symbolName/]
[else]
	[aParam.type.symbolName/] *[aParam.symbolName/]
[/if]
[/template]

[template public genFunctionParamTypes(aFunction : Function) post (trim())]
[if (aFunction.param->isEmpty())]
	void
[else]
	[aFunction.param.genFunctionParamType()->sep(', ')/]
[/if]
[/template]

[template private genFunctionParamType(aParam : Parameter) post (trim())]
[if (aParam.passType = ParameterPassTypeEnum::value)]
	[aParam.type.symbolName/]
[else]
	[aParam.type.symbolName/] *
[/if]
[/template]

[template public genConstantDefinition(aConstant : Constant) post (trim())]
#define [aConstant.symbolName/] (([aConstant.type.symbolName/]) [aConstant.value/][if ((aConstant.type.signedness = SignednessEnum::unsigned) and (aConstant.constantType = ConstantTypeEnum::numericalValue))]U[/if])
[/template]

[template public genGlobalVariableDeclaration(aGlobalVariable : GlobalVariable) post (trim())]
extern [aGlobalVariable.type.genTypePartOfVariableDeclaration()/] [aGlobalVariable.symbolName/];
[/template]

[template public genGlobalVariableDefinition(aGlobalVariable : GlobalVariable) post (trim())]
[aGlobalVariable.type.genTypePartOfVariableDeclaration()/] [aGlobalVariable.symbolName/][aGlobalVariable.genInitPartOfVariableDeclaration()/];
[/template]

[template private genInitPartOfVariableDeclaration(aGlobalVariable : GlobalVariable)]
[if (aGlobalVariable.initAtDefinition)] = [aGlobalVariable.genInitValuePartOfVariableDeclaration()/][/if]
[/template]

[template private genInitValuePartOfVariableDeclaration(aGlobalVariable : GlobalVariable) ? (aGlobalVariable.type.oclIsKindOf(PrimitiveType)) post (trim())]
[let aInitValueConstant : Constant = aGlobalVariable.initValueConstant]
	[aInitValueConstant.symbolName/]
[else]
	0[if (aGlobalVariable.type.oclAsType(PrimitiveType).signedness = SignednessEnum::unsigned)]U[/if]
[/let]
[/template]

[template public genTypePartOfVariableDeclaration(aType : Type) post (trim())]
[aType.symbolName/]
[/template]

[template private genTypePartOfVariableDeclaration(aType : UnionType) ? (isAnonymous) post (trim())]
union { /* MISRA RULE 18.4 VIOLATION : It is safe because the union data is not used at the same time */
	[for (aUnionMember : UnionMember | aType.member)]
		[aUnionMember.type.genTypePartOfVariableDeclaration()/] [aUnionMember.memberName/];
	[/for]
}
[/template]

[template public genMemoryMappingStart(aMemoryMapping : MemoryMapping) /]

[template private genMemoryMappingStart(aMemoryMapping : BswMemoryMapping) post (trim())]
#define [aMemoryMapping.genMemoryMappingStartMacro()/]
#include "MemMap.h" /* MISRA RULE 19.1 VIOLATION : It won't be fixed because of Specification of AUTOSAR Memory Mapping */
[/template]

[template private genMemoryMappingStart(aMemoryMapping : SwcMemoryMapping) post (trim())]
#define [aMemoryMapping.genMemoryMappingStartMacro()/]
#include "[aMemoryMapping.prefix/]_MemMap.h" /* MISRA RULE 19.1 VIOLATION : It won't be fixed because of Specification of AUTOSAR Memory Mapping */
[/template]

[template public genMemoryMappingStartMacro(aMemoryMapping : MemoryMapping) post (trim())]
[aMemoryMapping.prefix/]_START_SEC_[aMemoryMapping.memorySectionSymbolName/]
[/template]

[template public genMemoryMappingEnd(aMemoryMapping : MemoryMapping) /]

[template private genMemoryMappingEnd(aMemoryMapping : BswMemoryMapping) post (trim())]
#define [aMemoryMapping.genMemoryMappingEndMacro()/]
#include "MemMap.h" /* MISRA RULE 19.1 VIOLATION : It won't be fixed because of Specification of AUTOSAR Memory Mapping */
[/template]

[template private genMemoryMappingEnd(aMemoryMapping : SwcMemoryMapping) post (trim())]
#define [aMemoryMapping.genMemoryMappingEndMacro()/]
#include "[aMemoryMapping.prefix/]_MemMap.h" /* MISRA RULE 19.1 VIOLATION : It won't be fixed because of Specification of AUTOSAR Memory Mapping */
[/template]

[template public genMemoryMappingEndMacro(aMemoryMapping : MemoryMapping) post (trim())]
[aMemoryMapping.prefix/]_STOP_SEC_[aMemoryMapping.memorySectionSymbolName/]
[/template]
