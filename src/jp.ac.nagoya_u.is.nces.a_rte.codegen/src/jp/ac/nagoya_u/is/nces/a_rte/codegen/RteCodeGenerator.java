/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2015 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 *
 *  $Id $
 */
package jp.ac.nagoya_u.is.nces.a_rte.codegen;

import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.List;

import jp.ac.nagoya_u.is.nces.a_rte.codegen.internal.InternalCodeFormatter;
import jp.ac.nagoya_u.is.nces.a_rte.codegen.internal.InternalCodegenException;
import jp.ac.nagoya_u.is.nces.a_rte.codegen.rte.main.RteCodes;
import jp.ac.nagoya_u.is.nces.a_rte.model.rte.module.RteModule;

import org.eclipse.acceleo.engine.event.AbstractAcceleoTextGenerationListener;
import org.eclipse.acceleo.engine.event.AcceleoTextGenerationEvent;
import org.eclipse.emf.common.util.BasicMonitor;

import com.google.common.collect.Lists;

public class RteCodeGenerator {

	private final List<CodeFormatter> codeFormatters = Lists.newArrayList();

	public static RteCodeGenerator forGeneratePhase() {
		return new RteCodeGenerator();
	}

	public static RteCodeGenerator forContractPhase() {
		return new RteCodeGenerator();
	}

	private RteCodeGenerator() {
		this.codeFormatters.add(new InternalCodeFormatter());
	}

	public void addCodeFormatter(CodeFormatter codeFormatter) {
		this.codeFormatters.add(codeFormatter);
	}

	public void generate(RteModule rteModule, File outputDirectory) throws CodegenException {
		try {
			final List<InternalCodegenException> caughtExceptions = Lists.newArrayList();

			RteCodes rteCodes = new RteCodes(rteModule, outputDirectory, Collections.emptyList());
			rteCodes.addGenerationListener(new AbstractAcceleoTextGenerationListener() {
				@Override
				public void fileGenerated(AcceleoTextGenerationEvent event) {
					File generatedFile = new File(event.getText());
					try {
						for (CodeFormatter codeFormatter : RteCodeGenerator.this.codeFormatters) {
							codeFormatter.format(generatedFile);
						}
					} catch (InternalCodegenException e) { // COVERAGE (常用ケースではないため，コードレビューで問題ないことを確認)
						caughtExceptions.add(e);
					}
				}
			});

			rteCodes.doGenerate(new BasicMonitor());

			if (!caughtExceptions.isEmpty()) { // COVERAGE (常用ケースではないため，コードレビューで問題ないことを確認)
				throw new CodegenException("Error occurred while generating RTE codes. " + caughtExceptions.get(0).getMessage(), caughtExceptions.get(0));
			}

		} catch (IOException e) { // COVERAGE (常用ケースではないため，コードレビューで問題ないことを確認)
			throw new CodegenException("Error occurred while generating RTE codes. " + e.getMessage(), e);
		}
	}
}
