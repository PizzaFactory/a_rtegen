[comment]
/*
 *  TOPPERS/A-RTEGEN
 *      Automotive Runtime Environment Generator
 *
 *  Copyright (C) 2013-2015 by Eiwa System Management, Inc., JAPAN
 *
 *  上記著作権者は，以下の(1)〜(4)の条件を満たす場合に限り，本ソフトウェ
 *  ア（本ソフトウェアを改変したものを含む．以下同じ）を使用・複製・改
 *  変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
 *      スコード中に含まれていること．
 *  (2) 本ソフトウェアを，ライブラリ形式など，他のソフトウェア開発に使
 *      用できる形で再配布する場合には，再配布に伴うドキュメント（利用
 *      者マニュアルなど）に，上記の著作権表示，この利用条件および下記
 *      の無保証規定を掲載すること．
 *  (3) 本ソフトウェアを，機器に組み込むなど，他のソフトウェア開発に使
 *      用できない形で再配布する場合には，次のいずれかの条件を満たすこ
 *      と．
 *    (a) 再配布に伴うドキュメント（利用者マニュアルなど）に，上記の著
 *        作権表示，この利用条件および下記の無保証規定を掲載すること．
 *    (b) 再配布の形態を，別に定める方法によって，TOPPERSプロジェクトに
 *        報告すること．
 *  (4) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
 *      害からも，上記著作権者およびTOPPERSプロジェクトを免責すること．
 *      また，本ソフトウェアのユーザまたはエンドユーザからのいかなる理
 *      由に基づく請求からも，上記著作権者およびTOPPERSプロジェクトを
 *      免責すること．
 *
 *  本ソフトウェアは，AUTOSAR（AUTomotive Open System ARchitecture）仕
 *  様に基づいている．上記の許諾は，AUTOSARの知的財産権を許諾するもので
 *  はない．AUTOSARは，AUTOSAR仕様に基づいたソフトウェアを商用目的で利
 *  用する者に対して，AUTOSARパートナーになることを求めている．
 *
 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者お
 *  よびTOPPERSプロジェクトは，本ソフトウェアに関して，特定の使用目的
 *  に対する適合性も含めて，いかなる保証も行わない．また，本ソフトウェ
 *  アの利用により直接的または間接的に生じたいかなる損害に関しても，そ
 *  の責任を負わない．
 * 
 *  $Id: header.mtl 13333 2015-02-24 03:45:52Z tmori $
 */
[/comment]
[comment encoding = EUC-JP /]
[module rteApplicationHeader('http://nces.is.nagoya-u.ac.jp/a-rte/rte/module')]

[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::fileUtil /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::symbolUtil /]
[import jp::ac::nagoya_u::is::nces::a_rte::codegen::rte::common::rteApi /]

[template public genRteApplicationHeader(aRteApplicationHeader : RteApplicationHeader)]
[file (aRteApplicationHeader.fileName, false, 'ASCII')]
	[aRteApplicationHeader.genFileHeader()/]

	[aRteApplicationHeader.genRteApiConstantDefinitions()/]
	
	[aRteApplicationHeader.genInternalGlobalVariableDeclarations()/]

	[aRteApplicationHeader.genRteApiDefinitions()/]
	
	[aRteApplicationHeader.genExecutableEntityDeclarations()/]

	[aRteApplicationHeader.genRteApiImplFunctionDeclarations()/]
	
	[aRteApplicationHeader.genFileFooter()/]
[/file]
[/template]

[template private genFileHeader(aRteApplicationHeader : RteApplicationHeader)]
[aRteApplicationHeader.genFileHeaderComment()/]

#ifdef RTE_APPLICATION_HEADER_FILE
#error Multiple application header files included.
#endif /* RTE_APPLICATION_HEADER_FILE */
#define RTE_APPLICATION_HEADER_FILE

[aRteApplicationHeader.genSourceMacroDefinitions()/]

[if (aRteApplicationHeader.hasInlineApi)]
	#include "Os.h"
[/if]
[aRteApplicationHeader.genFileIncludes()/]

[aRteApplicationHeader.genExternCDeclarationStart()/]
[/template]

[template private genFileFooter(aRteApplicationHeader : RteApplicationHeader)]
[aRteApplicationHeader.genExternCDeclarationEnd()/]
[/template]

[comment]
ソース固有のマクロ定義
[/comment]
[template private genSourceMacroDefinitions (aRteApplicationHeader : RteApplicationHeader) ]
[for (aMacro : Macro | aRteApplicationHeader.sourceMacro)]
	[aMacro.genMacroDefinition()/]
[/for]
[/template]

[template private genRteApiConstantDefinitions (aRteApplicationHeader : RteApplicationHeader) ]
/*
 * RTE API Constant Definitions
 */
[for (aConstant : Constant | aRteApplicationHeader.constant)]
	[aConstant.genApplicationConstantDefinition()/]
[/for]
[/template]

[template private genInternalGlobalVariableDeclarations (aRteApplicationHeader : RteApplicationHeader) ]
/*
 * Internal Global Variable Declarations
 */
[for (aGroup : GlobalVariableGroup | aRteApplicationHeader.globalVariableGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aGlobalVariable : GlobalVariable | aGroup.globalVariable)]
		[aGlobalVariable.genGlobalVariableDeclaration()/]
	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[template private genRteApiImplFunctionDeclarations (aRteApplicationHeader : RteApplicationHeader) ]
/*
 * RTE API Implementation Function Declarations
 */
[for (aGroup : RteApiGroup | aRteApplicationHeader.DeclarationsRteApiGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aRteApi : RteApi | aGroup.rteApi)]
		[if (aRteApi.isInline)]
			LOCAL_INLINE [aRteApi.genRteApi()/]
		[else]
			[aRteApi.genFunctionDeclaration()/]
		[/if]
	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]

[template private genRteApiDefinitions (aRteApplicationHeader : RteApplicationHeader) ]
/*
 * RTE API Definitions
 */
[for (aGroup : RteApiGroup | aRteApplicationHeader.rteApiGroup)]
	[for (aRteApi : RteApi | aGroup.rteApi)]
		[aRteApi.genRteApiMapping()/]
	[/for]
[/for]
[/template]

[template private genRteApiMapping(aRteApi : RteApi)]
#define [aRteApi.apiMappingName/] [aRteApi.symbolName/]
[/template]

[template private genRteApiMapping(aRteApi : RteEnterApi)]
	[if (aRteApi.isNoneExclude)]
		#define [aRteApi.apiMappingName/]()
	[else]
		#define [aRteApi.apiMappingName/] [aRteApi.symbolName/]
	[/if]
[/template]

[template private genRteApiMapping(aRteApi : RteExitApi)]
	[if (aRteApi.isNoneExclude)]
		#define [aRteApi.apiMappingName/]()
	[else]
		#define [aRteApi.apiMappingName/] [aRteApi.symbolName/]
	[/if]
[/template]

[template private genExecutableEntityDeclarations (aRteApplicationHeader : RteApplicationHeader) ]
/*
 * RunnableEntity Declarations
 */
[for (aGroup : ExecutableEntityGroup | aRteApplicationHeader.dependentExecutableEntityGroup)]
	[aGroup.memoryMapping.genMemoryMappingStart()/]

	[for (aExecutableEntity : ExecutableEntity | aGroup.executableEntity)]
		[aExecutableEntity.genFunctionDeclaration()/]
	[/for]

	[aGroup.memoryMapping.genMemoryMappingEnd()/]

[/for]
[/template]
