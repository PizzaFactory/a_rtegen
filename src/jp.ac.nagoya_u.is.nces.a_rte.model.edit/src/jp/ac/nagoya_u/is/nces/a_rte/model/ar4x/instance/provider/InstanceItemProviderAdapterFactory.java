/**
 */
package jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.provider;

import java.util.ArrayList;
import java.util.Collection;

import jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.util.InstanceAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.IItemStyledLabelProvider;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemFontProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class InstanceItemProviderAdapterFactory extends InstanceAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public InstanceItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
		supportedTypes.add(ITableItemFontProvider.class);
		supportedTypes.add(IItemFontProvider.class);
		supportedTypes.add(IItemStyledLabelProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.PortInstanceInComposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortInstanceInCompositionItemProvider portInstanceInCompositionItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.PortInstanceInComposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortInstanceInCompositionAdapter() {
		if (portInstanceInCompositionItemProvider == null) {
			portInstanceInCompositionItemProvider = new PortInstanceInCompositionItemProvider(this);
		}

		return portInstanceInCompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.VariableDataInstanceInComposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableDataInstanceInCompositionItemProvider variableDataInstanceInCompositionItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.VariableDataInstanceInComposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableDataInstanceInCompositionAdapter() {
		if (variableDataInstanceInCompositionItemProvider == null) {
			variableDataInstanceInCompositionItemProvider = new VariableDataInstanceInCompositionItemProvider(this);
		}

		return variableDataInstanceInCompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.PVariableDataInstanceInSwc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PVariableDataInstanceInSwcItemProvider pVariableDataInstanceInSwcItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.PVariableDataInstanceInSwc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPVariableDataInstanceInSwcAdapter() {
		if (pVariableDataInstanceInSwcItemProvider == null) {
			pVariableDataInstanceInSwcItemProvider = new PVariableDataInstanceInSwcItemProvider(this);
		}

		return pVariableDataInstanceInSwcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.RVariableDataInstanceInSwc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RVariableDataInstanceInSwcItemProvider rVariableDataInstanceInSwcItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.RVariableDataInstanceInSwc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRVariableDataInstanceInSwcAdapter() {
		if (rVariableDataInstanceInSwcItemProvider == null) {
			rVariableDataInstanceInSwcItemProvider = new RVariableDataInstanceInSwcItemProvider(this);
		}

		return rVariableDataInstanceInSwcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.AssemblyDataInstanceConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssemblyDataInstanceConnectorItemProvider assemblyDataInstanceConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.AssemblyDataInstanceConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssemblyDataInstanceConnectorAdapter() {
		if (assemblyDataInstanceConnectorItemProvider == null) {
			assemblyDataInstanceConnectorItemProvider = new AssemblyDataInstanceConnectorItemProvider(this);
		}

		return assemblyDataInstanceConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.DelegationDataInstanceConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelegationDataInstanceConnectorItemProvider delegationDataInstanceConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.DelegationDataInstanceConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelegationDataInstanceConnectorAdapter() {
		if (delegationDataInstanceConnectorItemProvider == null) {
			delegationDataInstanceConnectorItemProvider = new DelegationDataInstanceConnectorItemProvider(this);
		}

		return delegationDataInstanceConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.ROperationInstanceInSwc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ROperationInstanceInSwcItemProvider rOperationInstanceInSwcItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.ROperationInstanceInSwc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createROperationInstanceInSwcAdapter() {
		if (rOperationInstanceInSwcItemProvider == null) {
			rOperationInstanceInSwcItemProvider = new ROperationInstanceInSwcItemProvider(this);
		}

		return rOperationInstanceInSwcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.POperationInstanceInSwc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected POperationInstanceInSwcItemProvider pOperationInstanceInSwcItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.POperationInstanceInSwc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPOperationInstanceInSwcAdapter() {
		if (pOperationInstanceInSwcItemProvider == null) {
			pOperationInstanceInSwcItemProvider = new POperationInstanceInSwcItemProvider(this);
		}

		return pOperationInstanceInSwcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.OperationInstanceInComposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationInstanceInCompositionItemProvider operationInstanceInCompositionItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.OperationInstanceInComposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationInstanceInCompositionAdapter() {
		if (operationInstanceInCompositionItemProvider == null) {
			operationInstanceInCompositionItemProvider = new OperationInstanceInCompositionItemProvider(this);
		}

		return operationInstanceInCompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.AssemblyOperationInstanceConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssemblyOperationInstanceConnectorItemProvider assemblyOperationInstanceConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.AssemblyOperationInstanceConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssemblyOperationInstanceConnectorAdapter() {
		if (assemblyOperationInstanceConnectorItemProvider == null) {
			assemblyOperationInstanceConnectorItemProvider = new AssemblyOperationInstanceConnectorItemProvider(this);
		}

		return assemblyOperationInstanceConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.SwComponentInstanceInSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SwComponentInstanceInSystemItemProvider swComponentInstanceInSystemItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.SwComponentInstanceInSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSwComponentInstanceInSystemAdapter() {
		if (swComponentInstanceInSystemItemProvider == null) {
			swComponentInstanceInSystemItemProvider = new SwComponentInstanceInSystemItemProvider(this);
		}

		return swComponentInstanceInSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.InstanceRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceRootItemProvider instanceRootItemProvider;

	/**
	 * This creates an adapter for a {@link jp.ac.nagoya_u.is.nces.a_rte.model.ar4x.instance.InstanceRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceRootAdapter() {
		if (instanceRootItemProvider == null) {
			instanceRootItemProvider = new InstanceRootItemProvider(this);
		}

		return instanceRootItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (portInstanceInCompositionItemProvider != null) portInstanceInCompositionItemProvider.dispose();
		if (variableDataInstanceInCompositionItemProvider != null) variableDataInstanceInCompositionItemProvider.dispose();
		if (pVariableDataInstanceInSwcItemProvider != null) pVariableDataInstanceInSwcItemProvider.dispose();
		if (rVariableDataInstanceInSwcItemProvider != null) rVariableDataInstanceInSwcItemProvider.dispose();
		if (assemblyDataInstanceConnectorItemProvider != null) assemblyDataInstanceConnectorItemProvider.dispose();
		if (delegationDataInstanceConnectorItemProvider != null) delegationDataInstanceConnectorItemProvider.dispose();
		if (rOperationInstanceInSwcItemProvider != null) rOperationInstanceInSwcItemProvider.dispose();
		if (pOperationInstanceInSwcItemProvider != null) pOperationInstanceInSwcItemProvider.dispose();
		if (operationInstanceInCompositionItemProvider != null) operationInstanceInCompositionItemProvider.dispose();
		if (assemblyOperationInstanceConnectorItemProvider != null) assemblyOperationInstanceConnectorItemProvider.dispose();
		if (swComponentInstanceInSystemItemProvider != null) swComponentInstanceInSystemItemProvider.dispose();
		if (instanceRootItemProvider != null) instanceRootItemProvider.dispose();
	}

}
