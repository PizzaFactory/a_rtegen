# ======================================================================
# TOPPERS/ATK2 コーディングスタイル
# ----------------------------------------------------------------------
# $Id: atk2style.cfg 141 2014-09-26 09:13:20Z mtakada $
# ======================================================================

# ======================================================================
# 本設定ファイルはuncrustifyを用いてATK2コーディングスタイルを適用するた
# めの設定ファイルである． 
# uncrustifyのバージョンは0.59を用いる
# 
# 使用方法(本ファイルがC直下にある場合)
# uncrustify.exe -l C -c C:\atk2style.cfg <C-file>
# ※ワイルドカード使用可能
# ※直接対象ファイルを書き換える場合，--replace --no-backupを付ける
# ======================================================================

# Uncrustify 0.58

#
# General options
#

# The type of line endings
###ATK2STYLE-001
#newlines                                 = auto     # auto/lf/crlf/cr

# The original size of tabs in the input
###ATK2STYLE-002 
input_tab_size                           = 4        # number

# The size of tabs in the output (only used if align_with_tabs=true)
###ATK2STYLE-003 
output_tab_size                          = 4        # number

# The ASCII value of the string escape char, usually 92 (\) or 94 (^). (Pawn)
###ATK2STYLE-004
#string_escape_char                       = 92       # number

# Alternate string escape char for Pawn. Only works right before the quote char.
###ATK2STYLE-005
#string_escape_char2                      = 0        # number

# Allow interpreting '>=' and '>>=' as part of a template in 'void f(list<list<B>>=val);'.
# If true (default), 'assert(x<0 && y>=3)' will be broken.
# Improvements to template detection may make this option obsolete.
###ATK2STYLE-006
#tok_split_gte                            = true    # false/true

#
# Indenting
#

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8.
###ATK2STYLE-007 
indent_columns                           = 4        # number

# The continuation indent. If non-zero, this overrides the indent of '(' and '=' continuation indents.
# For FreeBSD, this is set to 4.
###ATK2STYLE-008
#indent_continue                          = 0        # number

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs to brace level, align with spaces
# 2=indent and align with tabs, using spaces when not on a tabstop
###ATK2STYLE-009 
indent_with_tabs                         = 2        # number

# Comments that are not a brace level are indented with tabs on a tabstop.
# Requires indent_with_tabs=2. If false, will use spaces.
###ATK2STYLE-010
#indent_cmt_with_tabs                     = true    # false/true

# Whether to indent strings broken by '\' so that they line up
###ATK2STYLE-011
#indent_align_string                      = true    # false/true

# Spaces to indent '{' from level
###ATK2STYLE-013
#indent_brace                             = 0        # number

# Whether braces are indented to the body level
###ATK2STYLE-014
indent_braces                            = false    # false/true

# Disabled indenting function braces if indent_braces is true
###ATK2STYLE-015
#indent_braces_no_func                    = true    # false/true

# Disabled indenting struct braces if indent_braces is true
###ATK2STYLE-017
#indent_braces_no_struct                  = true    # false/true

# Indent based on the size of the brace parent, i.e. 'if' => 3 spaces, 'for' => 4 spaces, etc.
###ATK2STYLE-018
#indent_brace_parent                      = true    # false/true

# Whether the 'namespace' body is indented
###ATK2STYLE-019
#indent_namespace                         = true    # false/true

# The number of spaces to indent a namespace block
###ATK2STYLE-020
#indent_namespace_level                   = 0        # number

# If the body of the namespace is longer than this number, it won't be indented.
# Requires indent_namespace=true. Default=0 (no limit)
###ATK2STYLE-021
#indent_namespace_limit                   = 0        # number

# Whether the 'extern "C"' body is indented
###ATK2STYLE-022
#indent_extern                            = true    # false/true

# False=treat 'else\nif' as 'else if' for indenting purposes
# True=indent the 'if' one level
###ATK2STYLE-025
#indent_else_if                           = true    # false/true

# Amount to indent variable declarations after a open brace. neg=relative, pos=absolute
###ATK2STYLE-026
#indent_var_def_blk                       = 0        # number

# Indent continued variable declarations instead of aligning.
###ATK2STYLE-027
#indent_var_def_cont                      = true    # false/true

# True:  indent continued function call parameters one indent level
# False: align parameters under the open paren
###ATK2STYLE-028
#indent_func_call_param                   = true    # false/true

# Same as indent_func_call_param, but for function defs
###ATK2STYLE-029
#indent_func_def_param                    = true    # false/true

# Same as indent_func_call_param, but for function protos
###ATK2STYLE-030
#indent_func_proto_param                  = true    # false/true

# Same as indent_func_call_param, but for templates
###ATK2STYLE-033
#indent_template_param                    = true    # false/true

# Double the indent for indent_func_xxx_param options
###ATK2STYLE-034
#indent_func_param_double                 = true    # false/true

# Indentation column for standalone 'const' function decl/proto qualifier
###ATK2STYLE-035
#indent_func_const                        = 0        # number

# Indentation column for standalone 'throw' function decl/proto qualifier
###ATK2STYLE-036
#indent_func_throw                        = 0        # number

# The number of spaces to indent a continued '->' or '.'
# Usually set to 0, 1, or indent_columns.
###ATK2STYLE-037
#indent_member                            = 0        # number

# Spaces to indent single line ('//') comments on lines before code
###ATK2STYLE-038
#indent_sing_line_comments                = 0        # number

# If set, will indent trailing single line ('//') comments relative
# to the code instead of trying to keep the same absolute column
###ATK2STYLE-039
#indent_relative_single_line_comments     = true    # false/true

# Spaces to indent 'case' from 'switch'
# Usually 0 or indent_columns.
###ATK2STYLE-040
indent_switch_case                       = 0        # number

# Spaces to shift the 'case' line, without affecting any other lines
# Usually 0.
###ATK2STYLE-041
#indent_case_shift                        = 0        # number

# Spaces to indent '{' from 'case'.
# By default, the brace will appear under the 'c' in case.
# Usually set to 0 or indent_columns.
###ATK2STYLE-042
#indent_case_brace                        = 0        # number

# Whether to indent comments found in first column
###ATK2STYLE-043
#indent_col1_comment                      = true    # false/true

# How to indent goto labels
#  >0 : absolute column where 1 is the leftmost column
#  <=0 : subtract from brace indent
###ATK2STYLE-044
indent_label                             = 3        # number

# Same as indent_label, but for access specifiers that are followed by a colon
###ATK2STYLE-045
#indent_access_spec                       = 1        # number

# Indent the code after an access specifier by one level.
# If set, this option forces 'indent_access_spec=0'
###ATK2STYLE-046
#indent_access_spec_body                  = true    # false/true

# If an open paren is followed by a newline, indent the next line so that it lines up after the open paren (not recommended)
###ATK2STYLE-047
#indent_paren_nl                          = true    # false/true

# Controls the indent of a close paren after a newline.
# 0: Indent to body level
# 1: Align under the open paren
# 2: Indent to the brace level
###ATK2STYLE-048
#indent_paren_close                       = 0        # number

# Controls the indent of a comma when inside a paren.If TRUE, aligns under the open paren
###ATK2STYLE-049
#indent_comma_paren                       = true    # false/true

# Controls the indent of a BOOL operator when inside a paren.If TRUE, aligns under the open paren
###ATK2STYLE-050
#indent_bool_paren                        = true    # false/true

# If 'indent_bool_paren' is true, controls the indent of the first expression. If TRUE, aligns the first expression to the following ones
###ATK2STYLE-051
#indent_first_bool_expr                   = true    # false/true

# If an open square is followed by a newline, indent the next line so that it lines up after the open square (not recommended)
###ATK2STYLE-052
#indent_square_nl                         = true    # false/true

# Align continued statements at the '='. Default=True
# If FALSE or the '=' is followed by a newline, the next line is indent one tab.
###ATK2STYLE-054
#indent_align_assign                      = false     # false/true

#
# Spacing options
#

# Add or remove space around arithmetic operator '+', '-', '/', '*', etc
###ATK2STYLE-055
sp_arith                                 = add   # ignore/add/remove/force

# Add or remove space around assignment operator '=', '+=', etc
###ATK2STYLE-056 
sp_assign                                = force    # ignore/add/remove/force

# Add or remove space around assignment operator '=' in a prototype
###ATK2STYLE-057 
sp_assign_default                        = force    # ignore/add/remove/force

# Add or remove space before assignment operator '=', '+=', etc. Overrides sp_assign.
###ATK2STYLE-058
#sp_before_assign                         = ignore   # ignore/add/remove/force

# Add or remove space after assignment operator '=', '+=', etc. Overrides sp_assign.
###ATK2STYLE-059
#sp_after_assign                          = ignore   # ignore/add/remove/force

# Add or remove space around assignment '=' in enum
###ATK2STYLE-060
sp_enum_assign                           = add   # ignore/add/remove/force

# Add or remove space before assignment '=' in enum. Overrides sp_enum_assign.
###ATK2STYLE-061
#sp_enum_before_assign                    = ignore   # ignore/add/remove/force

# Add or remove space after assignment '=' in enum. Overrides sp_enum_assign.
###ATK2STYLE-062
#sp_enum_after_assign                     = ignore   # ignore/add/remove/force

# Add or remove space around preprocessor '##' concatenation operator. Default=Add
###ATK2STYLE-063
#sp_pp_concat                             = add      # ignore/add/remove/force

# Add or remove space after preprocessor '#' stringify operator. Also affects the '#@' charizing operator. Default=Add
###ATK2STYLE-064
#sp_pp_stringify                          = add      # ignore/add/remove/force

# Add or remove space around boolean operators '&&' and '||'
###ATK2STYLE-065 
sp_bool                                  = force    # ignore/add/remove/force

# Add or remove space around compare operator '<', '>', '==', etc
###ATK2STYLE-066 
sp_compare                               = force    # ignore/add/remove/force

# Add or remove space inside '(' and ')'
###ATK2STYLE-067
sp_inside_paren                          = remove   # ignore/add/remove/force

# Add or remove space between nested parens
###ATK2STYLE-068
sp_paren_paren                           = remove   # ignore/add/remove/force

# Whether to balance spaces inside nested parens
###ATK2STYLE-069
#sp_balance_nested_parens                 = true    # false/true

# Add or remove space between ')' and '{'
###ATK2STYLE-070
#sp_paren_brace                           = ignore   # ignore/add/remove/force

# Add or remove space before pointer star '*'
###ATK2STYLE-071
sp_before_ptr_star                       = add   # ignore/add/remove/force

# Add or remove space before pointer star '*' that isn't followed by a variable name
# If set to 'ignore', sp_before_ptr_star is used instead.
###ATK2STYLE-072
#sp_before_unnamed_ptr_star               = remove   # ignore/add/remove/force

# Add or remove space between pointer stars '*'
###ATK2STYLE-073
sp_between_ptr_star                      = remove   # ignore/add/remove/force

# Add or remove space after pointer star '*', if followed by a word.
###ATK2STYLE-074
sp_after_ptr_star                        = remove   # ignore/add/remove/force

# Add or remove space after a pointer star '*', if followed by a func proto/def.
###ATK2STYLE-075
#sp_after_ptr_star_func                   = ignore   # ignore/add/remove/force

# Add or remove space before a pointer star '*', if followed by a func proto/def.
###ATK2STYLE-076
#sp_before_ptr_star_func                  = ignore   # ignore/add/remove/force

# Add or remove space before a reference sign '&'
###ATK2STYLE-077
#sp_before_byref                          = ignore   # ignore/add/remove/force

# Add or remove space before a reference sign '&' that isn't followed by a variable name
# If set to 'ignore', sp_before_byref is used instead.
###ATK2STYLE-078
#sp_before_unnamed_byref                  = ignore   # ignore/add/remove/force

# Add or remove space after reference sign '&', if followed by a word.
###ATK2STYLE-079
#sp_after_byref                           = ignore   # ignore/add/remove/force

# Add or remove space after a reference sign '&', if followed by a func proto/def.
###ATK2STYLE-080
#sp_after_byref_func                      = ignore   # ignore/add/remove/force

# Add or remove space before a reference sign '&', if followed by a func proto/def.
###ATK2STYLE-081
#sp_before_byref_func                     = ignore   # ignore/add/remove/force

# Add or remove space between type and word. Default=Force
###ATK2STYLE-082
#sp_after_type                            = force    # ignore/add/remove/force

# Add or remove space in 'template <' vs 'template<'.
# If set to ignore, sp_before_angle is used.
###ATK2STYLE-083
#sp_template_angle                        = ignore   # ignore/add/remove/force

# Add or remove space before '<>'
###ATK2STYLE-084
#sp_before_angle                          = ignore   # ignore/add/remove/force

# Add or remove space inside '<' and '>'
###ATK2STYLE-085
#sp_inside_angle                          = ignore   # ignore/add/remove/force

# Add or remove space after '<>'
###ATK2STYLE-086
#sp_after_angle                           = ignore   # ignore/add/remove/force

# Add or remove space between '<>' and '(' as found in 'new List<byte>();'
###ATK2STYLE-087
#sp_angle_paren                           = ignore   # ignore/add/remove/force

# Add or remove space between '<>' and a word as in 'List<byte> m;'
###ATK2STYLE-088
#sp_angle_word                            = ignore   # ignore/add/remove/force

# Add or remove space between '>' and '>' in '>>' (template stuff C++/C# only). Default=Add
###ATK2STYLE-089
#sp_angle_shift                           = add      # ignore/add/remove/force

# Add or remove space before '(' of 'if', 'for', 'switch', and 'while'
###ATK2STYLE-090 
sp_before_sparen                         = force    # ignore/add/remove/force

# Add or remove space inside if-condition '(' and ')'
###ATK2STYLE-091 
sp_inside_sparen                         = remove   # ignore/add/remove/force

# Add or remove space before if-condition ')'. Overrides sp_inside_sparen.
###ATK2STYLE-092
#sp_inside_sparen_close                   = ignore   # ignore/add/remove/force

# Add or remove space after ')' of 'if', 'for', 'switch', and 'while'
###ATK2STYLE-093 
sp_after_sparen                          = force    # ignore/add/remove/force

# Add or remove space between ')' and '{' of 'if', 'for', 'switch', and 'while'
###ATK2STYLE-094
#sp_sparen_brace                          = ignore   # ignore/add/remove/force

# Add or remove space before empty statement ';' on 'if', 'for' and 'while'
###ATK2STYLE-097
sp_special_semi                          = remove   # ignore/add/remove/force

# Add or remove space before ';'. Default=Remove
###ATK2STYLE-098
sp_before_semi                           = remove   # ignore/add/remove/force

# Add or remove space before ';' in non-empty 'for' statements
###ATK2STYLE-099
#sp_before_semi_for                       = ignore   # ignore/add/remove/force

# Add or remove space before a semicolon of an empty part of a for statement.
###ATK2STYLE-100
#sp_before_semi_for_empty                 = ignore   # ignore/add/remove/force

# Add or remove space after ';', except when followed by a comment. Default=Add
###ATK2STYLE-101
#sp_after_semi                            = add      # ignore/add/remove/force

# Add or remove space after ';' in non-empty 'for' statements. Default=Force
###ATK2STYLE-102
#sp_after_semi_for                        = force    # ignore/add/remove/force

# Add or remove space after the final semicolon of an empty part of a for statement: for ( ; ; <here> ).
###ATK2STYLE-103
sp_after_semi_for_empty                  = remove   # ignore/add/remove/force

# Add or remove space before '[' (except '[]')
###ATK2STYLE-104
sp_before_square                         = remove   # ignore/add/remove/force

# Add or remove space before '[]'
###ATK2STYLE-105
sp_before_squares                        = remove   # ignore/add/remove/force

# Add or remove space inside '[' and ']'
###ATK2STYLE-106
sp_inside_square                         = remove   # ignore/add/remove/force

# Add or remove space after ','
###ATK2STYLE-107
sp_after_comma                           = add   # ignore/add/remove/force

# Add or remove space before ','
###ATK2STYLE-108
sp_before_comma                          = remove   # ignore/add/remove/force

# Add or remove space between an open paren and comma: '(,' vs '( ,'
###ATK2STYLE-109
#sp_paren_comma                           = force    # ignore/add/remove/force

# Add or remove space before the variadic '...' when preceded by a non-punctuator
###ATK2STYLE-110
#sp_before_ellipsis                       = ignore   # ignore/add/remove/force

# Add or remove space before case ':'. Default=Remove
###ATK2STYLE-113
sp_before_case_colon                     = remove   # ignore/add/remove/force

# Add or remove space between 'operator' and operator sign
###ATK2STYLE-114
#sp_after_operator                        = ignore   # ignore/add/remove/force

# Add or remove space between the operator symbol and the open paren, as in 'operator ++('
###ATK2STYLE-115
#sp_after_operator_sym                    = ignore   # ignore/add/remove/force

# Add or remove space after C/D cast, i.e. 'cast(int)a' vs 'cast(int) a' or '(int)a' vs '(int) a'
###ATK2STYLE-116 
sp_after_cast                            = force    # ignore/add/remove/force

# Add or remove spaces inside cast parens
###ATK2STYLE-117
sp_inside_paren_cast                     = remove   # ignore/add/remove/force

# Add or remove space between 'sizeof' and '('
###ATK2STYLE-119
sp_sizeof_paren                          = remove   # ignore/add/remove/force

# Add or remove space after the tag keyword (Pawn)
###ATK2STYLE-120
#sp_after_tag                             = ignore   # ignore/add/remove/force

# Add or remove space inside enum '{' and '}'
###ATK2STYLE-121
#sp_inside_braces_enum                    = ignore   # ignore/add/remove/force

# Add or remove space inside struct/union '{' and '}'
###ATK2STYLE-122
#sp_inside_braces_struct                  = ignore   # ignore/add/remove/force

# Add or remove space inside '{' and '}'
###ATK2STYLE-123
sp_inside_braces                         = add   # ignore/add/remove/force

# Add or remove space inside '{}'
###ATK2STYLE-124
sp_inside_braces_empty                   = remove   # ignore/add/remove/force

# Add or remove space between return type and function name
# A minimum of 1 is forced except for pointer return types.
###ATK2STYLE-125
#sp_type_func                             = ignore   # ignore/add/remove/force

# Add or remove space between function name and '(' on function declaration
###ATK2STYLE-126
sp_func_proto_paren                      = remove   # ignore/add/remove/force

# Add or remove space between function name and '(' on function definition
###ATK2STYLE-127
sp_func_def_paren                        = remove   # ignore/add/remove/force

# Add or remove space inside empty function '()'
###ATK2STYLE-128
sp_inside_fparens                        = remove   # ignore/add/remove/force

# Add or remove space inside function '(' and ')'
###ATK2STYLE-129
sp_inside_fparen                         = remove   # ignore/add/remove/force

# Add or remove space between ']' and '(' when part of a function call.
###ATK2STYLE-130
#sp_square_fparen                         = ignore   # ignore/add/remove/force

# Add or remove space between ')' and '{' of function
###ATK2STYLE-131
#sp_fparen_brace                          = ignore   # ignore/add/remove/force

# Add or remove space between function name and '(' on function calls
###ATK2STYLE-132
#sp_func_call_paren                       = ignore   # ignore/add/remove/force

# Add or remove space between function name and '()' on function calls without parameters.
# If set to 'ignore' (the default), sp_func_call_paren is used.
###ATK2STYLE-133
sp_func_call_paren_empty                 = remove   # ignore/add/remove/force

# Add or remove space between the user function name and '(' on function calls
# You need to set a keyword to be a user function, like this: 'set func_call_user _' in the config file.
###ATK2STYLE-134
#sp_func_call_user_paren                  = ignore   # ignore/add/remove/force

# Add or remove space between 'return' and '('
###ATK2STYLE-136
sp_return_paren                          = remove   # ignore/add/remove/force

# Add or remove space between '__attribute__' and '('
###ATK2STYLE-137
sp_attribute_paren                       = remove   # ignore/add/remove/force

# Add or remove space between 'defined' and '(' in '#if defined (FOO)'
###ATK2STYLE-138 
sp_defined_paren                         = remove   # ignore/add/remove/force

# Add or remove space between 'throw' and '(' in 'throw (something)'
###ATK2STYLE-139
#sp_throw_paren                           = ignore   # ignore/add/remove/force

# Add or remove space between 'catch' and '(' in 'catch (something) { }'
# If set to ignore, sp_before_sparen is used.
###ATK2STYLE-140
#sp_catch_paren                           = ignore   # ignore/add/remove/force

# Add or remove space between macro and value
###ATK2STYLE-143
#sp_macro                                 = ignore   # ignore/add/remove/force

# Add or remove space between macro function ')' and value
###ATK2STYLE-144
#sp_macro_func                            = ignore   # ignore/add/remove/force

# Add or remove space between 'else' and '{' if on the same line
###ATK2STYLE-145
sp_else_brace                            = force    # ignore/add/remove/force

# Add or remove space between '}' and 'else' if on the same line
###ATK2STYLE-146
#sp_brace_else                            = ignore   # ignore/add/remove/force

# Add or remove space between '}' and the name of a typedef on the same line
###ATK2STYLE-147
sp_brace_typedef                         = add   # ignore/add/remove/force

# Add or remove space between 'catch' and '{' if on the same line
###ATK2STYLE-148
#sp_catch_brace                           = ignore   # ignore/add/remove/force

# Add or remove space between '}' and 'catch' if on the same line
###ATK2STYLE-149
#sp_brace_catch                           = ignore   # ignore/add/remove/force

# Add or remove space between 'finally' and '{' if on the same line
###ATK2STYLE-150
#sp_finally_brace                         = ignore   # ignore/add/remove/force

# Add or remove space between '}' and 'finally' if on the same line
###ATK2STYLE-151
#sp_brace_finally                         = ignore   # ignore/add/remove/force

# Add or remove space between 'try' and '{' if on the same line
###ATK2STYLE-152
#sp_try_brace                             = ignore   # ignore/add/remove/force

# Add or remove space between get/set and '{' if on the same line
###ATK2STYLE-153
#sp_getset_brace                          = ignore   # ignore/add/remove/force

# Add or remove space before the '::' operator
###ATK2STYLE-154
#sp_before_dc                             = ignore   # ignore/add/remove/force

# Add or remove space after the '::' operator
###ATK2STYLE-155
#sp_after_dc                              = ignore   # ignore/add/remove/force

# Add or remove around the D named array initializer ':' operator
###ATK2STYLE-156
#sp_d_array_colon                         = ignore   # ignore/add/remove/force

# Add or remove space after the '!' (not) operator. Default=Remove
###ATK2STYLE-157
#sp_not                                   = remove   # ignore/add/remove/force

# Add or remove space after the '~' (invert) operator. Default=Remove
###ATK2STYLE-158
#sp_inv                                   = remove   # ignore/add/remove/force

# Add or remove space after the '&' (address-of) operator. Default=Remove
# This does not affect the spacing after a '&' that is part of a type.
###ATK2STYLE-159
#sp_addr                                  = remove   # ignore/add/remove/force

# Add or remove space around the '.' or '->' operators. Default=Remove
###ATK2STYLE-160
#sp_member                                = remove   # ignore/add/remove/force

# Add or remove space after the '*' (dereference) operator. Default=Remove
# This does not affect the spacing after a '*' that is part of a type.
###ATK2STYLE-161
#sp_deref                                 = remove   # ignore/add/remove/force

# Add or remove space after '+' or '-', as in 'x = -5' or 'y = +7'. Default=Remove
###ATK2STYLE-162
#sp_sign                                  = remove   # ignore/add/remove/force

# Add or remove space before or after '++' and '--', as in '(--x)' or 'y++;'. Default=Remove
###ATK2STYLE-163
#sp_incdec                                = remove   # ignore/add/remove/force

# Add or remove space before a backslash-newline at the end of a line. Default=Add
###ATK2STYLE-164
#sp_before_nl_cont                        = add      # ignore/add/remove/force

# Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'
###ATK2STYLE-165
#sp_after_oc_scope                        = ignore   # ignore/add/remove/force

# Add or remove space after the colon in message specs
# '-(int) f:(int) x;' vs '-(int) f: (int) x;'
###ATK2STYLE-166
#sp_after_oc_colon                        = ignore   # ignore/add/remove/force

# Add or remove space before the colon in message specs
# '-(int) f: (int) x;' vs '-(int) f : (int) x;'
###ATK2STYLE-167
#sp_before_oc_colon                       = ignore   # ignore/add/remove/force

# Add or remove space after the colon in message specs
# '[object setValue:1];' vs '[object setValue: 1];'
###ATK2STYLE-168
#sp_after_send_oc_colon                   = ignore   # ignore/add/remove/force

# Add or remove space before the colon in message specs
# '[object setValue:1];' vs '[object setValue :1];'
###ATK2STYLE-169
#sp_before_send_oc_colon                  = ignore   # ignore/add/remove/force

# Add or remove space after the (type) in message specs
# '-(int)f: (int) x;' vs '-(int)f: (int)x;'
###ATK2STYLE-170
#sp_after_oc_type                         = ignore   # ignore/add/remove/force

# Add or remove space after the first (type) in message specs
# '-(int) f:(int)x;' vs '-(int)f:(int)x;'
###ATK2STYLE-171
#sp_after_oc_return_type                  = ignore   # ignore/add/remove/force

# Add or remove space between '@selector' and '('
# '@selector(msgName)' vs '@selector (msgName)'
# Also applies to @protocol() constructs
###ATK2STYLE-172
#sp_after_oc_at_sel                       = ignore   # ignore/add/remove/force

# Add or remove space between '@selector(x)' and the following word
# '@selector(foo) a:' vs '@selector(foo)a:'
###ATK2STYLE-173
#sp_after_oc_at_sel_parens                = ignore   # ignore/add/remove/force

# Add or remove space inside '@selector' parens
# '@selector(foo)' vs '@selector( foo )'
# Also applies to @protocol() constructs
###ATK2STYLE-174
#sp_inside_oc_at_sel_parens               = ignore   # ignore/add/remove/force

# Add or remove space before a block pointer caret
# '^int (int arg){...}' vs. ' ^int (int arg){...}'
###ATK2STYLE-175
#sp_before_oc_block_caret                 = ignore   # ignore/add/remove/force

# Add or remove space after a block pointer caret
# '^int (int arg){...}' vs. '^ int (int arg){...}'
###ATK2STYLE-176
#sp_after_oc_block_caret                  = ignore   # ignore/add/remove/force

# Add or remove space around the ':' in 'b ? t : f'
###ATK2STYLE-177
sp_cond_colon                            = add   # ignore/add/remove/force

# Add or remove space around the '?' in 'b ? t : f'
###ATK2STYLE-178
sp_cond_question                         = add   # ignore/add/remove/force

# Fix the spacing between 'case' and the label. Only 'ignore' and 'force' make sense here.
###ATK2STYLE-179
#sp_case_label                            = ignore   # ignore/add/remove/force

# Control the space around the D '..' operator.
###ATK2STYLE-180
#sp_range                                 = ignore   # ignore/add/remove/force

# Controls the spaces between #else or #endif and a trailing comment
###ATK2STYLE-182 
sp_endif_cmt                             = force # ignore/add/remove/force

#
# Code alignment (not left column spaces/tabs)
#

# Whether to keep non-indenting tabs
###ATK2STYLE-183 
align_keep_tabs                          = true    # false/true

# Whether to use tabs for aligning
###ATK2STYLE-184 
align_with_tabs                          = true    # false/true

# Whether to bump out to the next tab when aligning
###ATK2STYLE-185 
align_on_tabstop                         = true    # false/true

# Whether to left-align numbers
###ATK2STYLE-186
#align_number_left                        = true    # false/true

# Align variable definitions in prototypes and functions
###ATK2STYLE-187
#align_func_params                        = true    # false/true

# Align parameters in single-line functions that have the same name.
# The function names must already be aligned with each other.
###ATK2STYLE-188
#align_same_func_call_params              = true    # false/true

# The span for aligning variable definitions (0=don't align)
###ATK2STYLE-189 
align_var_def_span                       = 12        # number

# How to align the star in variable definitions.
#  0=Part of the type     'void *   foo;'
#  1=Part of the variable 'void     *foo;'
#  2=Dangling             'void    *foo;'
###ATK2STYLE-190 
align_var_def_star_style                 = 1        # number

# How to align the '&' in variable definitions.
#  0=Part of the type
#  1=Part of the variable
#  2=Dangling
###ATK2STYLE-191 
align_var_def_amp_style                  = 1        # number

# The threshold for aligning variable definitions (0=no limit)
###ATK2STYLE-192
#align_var_def_thresh                     = 0        # number

# The gap for aligning variable definitions
###ATK2STYLE-193
#align_var_def_gap                        = 0        # number

# Whether to align the colon in struct bit fields
###ATK2STYLE-194
#align_var_def_colon                      = true    # false/true

# Whether to align any attribute after the variable name
###ATK2STYLE-195
#align_var_def_attribute                  = true    # false/true

# Whether to align inline struct/enum/union variable definitions
###ATK2STYLE-196
#align_var_def_inline                     = true    # false/true

# The span for aligning on '=' in assignments (0=don't align)
###ATK2STYLE-197
#align_assign_span                        = 0        # number

# The threshold for aligning on '=' in assignments (0=no limit)
###ATK2STYLE-198
#align_assign_thresh                      = 0        # number

# The span for aligning on '=' in enums (0=don't align)
###ATK2STYLE-199
#align_enum_equ_span                      = 0        # number

# The threshold for aligning on '=' in enums (0=no limit)
###ATK2STYLE-200
#align_enum_equ_thresh                    = 0        # number

# The span for aligning struct/union (0=don't align)
###ATK2STYLE-201
align_var_struct_span                    = 1        # number

# The threshold for aligning struct/union member definitions (0=no limit)
###ATK2STYLE-202
#align_var_struct_thresh                  = 0        # number

# The gap for aligning struct/union member definitions
###ATK2STYLE-203
#align_var_struct_gap                     = 0        # number

# The span for aligning struct initializer values (0=don't align)
###ATK2STYLE-204
#align_struct_init_span                   = 0        # number

# The minimum space between the type and the synonym of a typedef
###ATK2STYLE-205
#align_typedef_gap                        = 0        # number

# The span for aligning single-line typedefs (0=don't align)
###ATK2STYLE-206
align_typedef_span                       = 1        # number

# How to align typedef'd functions with other typedefs
# 0: Don't mix them at all
# 1: align the open paren with the types
# 2: align the function type name with the other type names
###ATK2STYLE-207
#align_typedef_func                       = 0        # number

# Controls the positioning of the '*' in typedefs. Just try it.
# 0: Align on typedef type, ignore '*'
# 1: The '*' is part of type name: typedef int  *pint;
# 2: The '*' is part of the type, but dangling: typedef int *pint;
###ATK2STYLE-208
#align_typedef_star_style                 = 0        # number

# Controls the positioning of the '&' in typedefs. Just try it.
# 0: Align on typedef type, ignore '&'
# 1: The '&' is part of type name: typedef int  &pint;
# 2: The '&' is part of the type, but dangling: typedef int &pint;
###ATK2STYLE-209
#align_typedef_amp_style                  = 0        # number

# The span for aligning comments that end lines (0=don't align)
###ATK2STYLE-210
align_right_cmt_span                     = 2        # number

# If aligning comments, mix with comments after '}' and #endif with less than 3 spaces before the comment
###ATK2STYLE-211
#align_right_cmt_mix                      = true    # false/true

# If a trailing comment is more than this number of columns away from the text it follows,
# it will qualify for being aligned. This has to be > 0 to do anything.
###ATK2STYLE-212
#align_right_cmt_gap                      = 0        # number

# Align trailing comment at or beyond column N; 'pulls in' comments as a bonus side effect (0=ignore)
###ATK2STYLE-213
#align_right_cmt_at_col                   = 0        # number

# The span for aligning function prototypes (0=don't align)
###ATK2STYLE-214
#align_func_proto_span                    = 0        # number

# Minimum gap between the return type and the function name.
###ATK2STYLE-215
#align_func_proto_gap                     = 0        # number

# Align function protos on the 'operator' keyword instead of what follows
###ATK2STYLE-216
#align_on_operator                        = true    # false/true

# Whether to mix aligning prototype and variable declarations.
# If true, align_var_def_XXX options are used instead of align_func_proto_XXX options.
###ATK2STYLE-217
#align_mix_var_proto                      = true    # false/true

# Align single-line functions with function prototypes, uses align_func_proto_span
###ATK2STYLE-218
#align_single_line_func                   = true    # false/true

# Aligning the open brace of single-line functions.
# Requires align_single_line_func=true, uses align_func_proto_span
###ATK2STYLE-219
#align_single_line_brace                  = true    # false/true

# Gap for align_single_line_brace.
###ATK2STYLE-220
#align_single_line_brace_gap              = 0        # number

# The span for aligning ObjC msg spec (0=don't align)
###ATK2STYLE-221
#align_oc_msg_spec_span                   = 0        # number

# Whether to align macros wrapped with a backslash and a newline.
# This will not work right if the macro contains a multi-line comment.
###ATK2STYLE-222
align_nl_cont                            = true    # false/true

# The minimum space between label and value of a preprocessor define
###ATK2STYLE-223
#align_pp_define_gap                      = 0        # number

# The span for aligning on '#define' bodies (0=don't align)
###ATK2STYLE-224
#align_pp_define_span                     = 0        # number

# Align lines that start with '<<' with previous '<<'. Default=true
###ATK2STYLE-225
#align_left_shift                         = false     # false/true

# Span for aligning parameters in an Obj-C message call on the ':' (0=don't align)
###ATK2STYLE-226
#align_oc_msg_colon_span                  = 0        # number

# Aligning parameters in an Obj-C '+' or '-' declaration on the ':'
###ATK2STYLE-227
#align_oc_decl_colon                      = true    # false/true

#
# Newline adding and removing options
#

# Whether to collapse empty blocks between '{' and '}'
###ATK2STYLE-228
#nl_collapse_empty_body                   = true    # false/true

# Don't split one-line braced assignments - 'foo_t f = { 1, 2 };'
###ATK2STYLE-229
#nl_assign_leave_one_liners               = true     # false/true

# Don't split one-line enums: 'enum foo { BAR = 15 };'
###ATK2STYLE-231
#nl_enum_leave_one_liners                 = true    # false/true

# Don't split one-line get or set functions
###ATK2STYLE-232
#nl_getset_leave_one_liners               = true    # false/true

# Don't split one-line function definitions - 'int foo() { return 0; }'
###ATK2STYLE-233
#nl_func_leave_one_liners                 = true     # false/true

# Don't split one-line if/else statements - 'if(a) b++;'
###ATK2STYLE-234
#nl_if_leave_one_liners                   = true    # false/true

# Add or remove newlines at the start of the file
###ATK2STYLE-235
#nl_start_of_file                         = ignore   # ignore/add/remove/force

# The number of newlines at the start of the file (only used if nl_start_of_file is 'add' or 'force'
###ATK2STYLE-236
#nl_start_of_file_min                     = 0        # number

# Add or remove newline at the end of the file
###ATK2STYLE-237
#nl_end_of_file                           = ignore   # ignore/add/remove/force

# The number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force')
###ATK2STYLE-238
#nl_end_of_file_min                       = 0        # number

# Add or remove newline between '=' and '{'
###ATK2STYLE-239
#nl_assign_brace                          = ignore   # ignore/add/remove/force

# Add or remove newline between '=' and '[' (D only)
###ATK2STYLE-240
#nl_assign_square                         = ignore   # ignore/add/remove/force

# Add or remove newline after '= [' (D only). Will also affect the newline before the ']'
###ATK2STYLE-241
#nl_after_square_assign                   = ignore   # ignore/add/remove/force

# The number of blank lines after a block of variable definitions
###ATK2STYLE-242
#nl_func_var_def_blk                      = 0        # number

# Add or remove newline between a function call's ')' and '{', as in:
# list_for_each(item, &list) { }
###ATK2STYLE-243
#nl_fcall_brace                           = ignore   # ignore/add/remove/force

# Add or remove newline between 'enum' and '{'
###ATK2STYLE-244
#nl_enum_brace                            = ignore   # ignore/add/remove/force

# Add or remove newline between 'struct and '{'
###ATK2STYLE-245
nl_struct_brace                          = remove	# ignore/add/remove/force

# Add or remove newline between 'union' and '{'
###ATK2STYLE-246
#nl_union_brace                           = ignore   # ignore/add/remove/force

# Add or remove newline between 'if' and '{'
###ATK2STYLE-247
nl_if_brace                              = remove	# ignore/add/remove/force

# Add or remove newline between '}' and 'else'
###ATK2STYLE-248
nl_brace_else                            = force	# ignore/add/remove/force

# Add or remove newline between 'else if' and '{'
# If set to ignore, nl_if_brace is used instead
###ATK2STYLE-249
nl_elseif_brace                          = remove	# ignore/add/remove/force

# Add or remove newline between 'else' and '{'
###ATK2STYLE-250
nl_else_brace                            = remove	# ignore/add/remove/force

# Add or remove newline between 'else' and 'if'
###ATK2STYLE-251
nl_else_if                               = remove	# ignore/add/remove/force

# Add or remove newline between '}' and 'finally'
###ATK2STYLE-252
#nl_brace_finally                         = ignore   # ignore/add/remove/force

# Add or remove newline between 'finally' and '{'
###ATK2STYLE-253
#nl_finally_brace                         = ignore   # ignore/add/remove/force

# Add or remove newline between 'try' and '{'
###ATK2STYLE-254
#nl_try_brace                             = ignore   # ignore/add/remove/force

# Add or remove newline between get/set and '{'
###ATK2STYLE-255
#nl_getset_brace                          = ignore   # ignore/add/remove/force

# Add or remove newline between 'for' and '{'
###ATK2STYLE-256
nl_for_brace                             = remove	# ignore/add/remove/force

# Add or remove newline between 'catch' and '{'
###ATK2STYLE-257
#nl_catch_brace                           = ignore   # ignore/add/remove/force

# Add or remove newline between '}' and 'catch'
###ATK2STYLE-258
#nl_brace_catch                           = ignore   # ignore/add/remove/force

# Add or remove newline between 'while' and '{'
###ATK2STYLE-259
nl_while_brace                           = remove	# ignore/add/remove/force

# Add or remove newline between 'using' and '{'
###ATK2STYLE-260
#nl_using_brace                           = ignore   # ignore/add/remove/force

# Add or remove newline between two open or close braces.
# Due to general newline/brace handling, REMOVE may not work.
###ATK2STYLE-261
#nl_brace_brace                           = ignore   # ignore/add/remove/force

# Add or remove newline between 'do' and '{'
###ATK2STYLE-262
#nl_do_brace                              = ignore   # ignore/add/remove/force

# Add or remove newline between '}' and 'while' of 'do' statement
###ATK2STYLE-263
#nl_brace_while                           = ignore   # ignore/add/remove/force

# Add or remove newline between 'switch' and '{'
###ATK2STYLE-264
#nl_switch_brace                          = ignore   # ignore/add/remove/force

# Add a newline between ')' and '{' if the ')' is on a different line than the if/for/etc.
# Overrides nl_for_brace, nl_if_brace, nl_switch_brace, nl_while_switch, and nl_catch_brace.
###ATK2STYLE-265
#nl_multi_line_cond                       = true    # false/true

# Force a newline in a define after the macro name for multi-line defines.
###ATK2STYLE-266
#nl_multi_line_define                     = true    # false/true

# Whether to put a newline before 'case' statement
###ATK2STYLE-267
#nl_before_case                           = true    # false/true

# Add or remove newline between ')' and 'throw'
###ATK2STYLE-268
#nl_before_throw                          = ignore   # ignore/add/remove/force

# Whether to put a newline after 'case' statement
###ATK2STYLE-269
#nl_after_case                            = true    # false/true

# Newline between namespace and {
###ATK2STYLE-270
#nl_namespace_brace                       = ignore   # ignore/add/remove/force

# Add or remove newline between return type and function name in a function definition
###ATK2STYLE-274 
nl_func_type_name                        = force    # ignore/add/remove/force

# Add or remove newline between function scope and name in a definition
# Controls the newline after '::' in 'void A::f() { }'
###ATK2STYLE-276
#nl_func_scope_name                       = ignore   # ignore/add/remove/force

# Add or remove newline between return type and function name in a prototype
###ATK2STYLE-277
#nl_func_proto_type_name                  = ignore   # ignore/add/remove/force

# Add or remove newline between a function name and the opening '('
###ATK2STYLE-278
#nl_func_paren                            = ignore   # ignore/add/remove/force

# Add or remove newline between a function name and the opening '(' in the definition
###ATK2STYLE-279
#nl_func_def_paren                        = ignore   # ignore/add/remove/force

# Add or remove newline after '(' in a function declaration
###ATK2STYLE-280
#nl_func_decl_start                       = ignore   # ignore/add/remove/force

# Add or remove newline after '(' in a function definition
###ATK2STYLE-281
#nl_func_def_start                        = ignore   # ignore/add/remove/force

# Overrides nl_func_decl_start when there is only one parameter.
###ATK2STYLE-282
#nl_func_decl_start_single                = ignore   # ignore/add/remove/force

# Overrides nl_func_def_start when there is only one parameter.
###ATK2STYLE-283
#nl_func_def_start_single                 = ignore   # ignore/add/remove/force

# Add or remove newline after each ',' in a function declaration
###ATK2STYLE-284
#nl_func_decl_args                        = ignore   # ignore/add/remove/force

# Add or remove newline after each ',' in a function definition
###ATK2STYLE-285
#nl_func_def_args                         = ignore   # ignore/add/remove/force

# Add or remove newline before the ')' in a function declaration
###ATK2STYLE-286
#nl_func_decl_end                         = ignore   # ignore/add/remove/force

# Add or remove newline before the ')' in a function definition
###ATK2STYLE-287
#nl_func_def_end                          = ignore   # ignore/add/remove/force

# Overrides nl_func_decl_end when there is only one parameter.
###ATK2STYLE-288
#nl_func_decl_end_single                  = ignore   # ignore/add/remove/force

# Overrides nl_func_def_end when there is only one parameter.
###ATK2STYLE-289
#nl_func_def_end_single                   = ignore   # ignore/add/remove/force

# Add or remove newline between '()' in a function declaration.
###ATK2STYLE-290
#nl_func_decl_empty                       = ignore   # ignore/add/remove/force

# Add or remove newline between '()' in a function definition.
###ATK2STYLE-291
#nl_func_def_empty                        = ignore   # ignore/add/remove/force

# Add or remove newline between function signature and '{'
###ATK2STYLE-292 
nl_fdef_brace                            = force    # ignore/add/remove/force

# Whether to put a newline after 'return' statement
###ATK2STYLE-293
#nl_after_return                          = true    # false/true

# Add or remove a newline between the return keyword and return expression.
###ATK2STYLE-294
#nl_return_expr                           = ignore   # ignore/add/remove/force

# Whether to put a newline after semicolons, except in 'for' statements
###ATK2STYLE-295 
nl_after_semicolon                       = true    # false/true

# Whether to put a newline after brace open.
# This also adds a newline before the matching brace close.
###ATK2STYLE-296
nl_after_brace_open                      = true    # false/true

# If nl_after_brace_open and nl_after_brace_open_cmt are true, a newline is
# placed between the open brace and a trailing single-line comment.
###ATK2STYLE-297
#nl_after_brace_open_cmt                  = true    # false/true

# Whether to put a newline after a virtual brace open with a non-empty body.
# These occur in un-braced if/while/do/for statement bodies.
###ATK2STYLE-298
#nl_after_vbrace_open                     = true    # false/true

# Whether to put a newline after a virtual brace open with an empty body.
# These occur in un-braced if/while/do/for statement bodies.
###ATK2STYLE-299
#nl_after_vbrace_open_empty               = true    # false/true

# Whether to put a newline after a brace close.
# Does not apply if followed by a necessary ';'.
###ATK2STYLE-300
#nl_after_brace_close                     = true    # false/true

# Whether to put a newline after a virtual brace close.
# Would add a newline before return in: 'if (foo) a++; return;'
###ATK2STYLE-301
#nl_after_vbrace_close                    = true    # false/true

# Whether to alter newlines in '#define' macros
###ATK2STYLE-302
#nl_define_macro                          = true    # false/true

# Whether to not put blanks after '#ifxx', '#elxx', or before '#endif'
###ATK2STYLE-303
#nl_squeeze_ifdef                         = true    # false/true

# Add or remove blank line before 'if'
###ATK2STYLE-304
#nl_before_if                             = ignore   # ignore/add/remove/force

# Add or remove blank line after 'if' statement
###ATK2STYLE-305
#nl_after_if                              = ignore   # ignore/add/remove/force

# Add or remove blank line before 'for'
###ATK2STYLE-306
#nl_before_for                            = ignore   # ignore/add/remove/force

# Add or remove blank line after 'for' statement
###ATK2STYLE-307
#nl_after_for                             = ignore   # ignore/add/remove/force

# Add or remove blank line before 'while'
###ATK2STYLE-308
#nl_before_while                          = ignore   # ignore/add/remove/force

# Add or remove blank line after 'while' statement
###ATK2STYLE-309
#nl_after_while                           = ignore   # ignore/add/remove/force

# Add or remove blank line before 'switch'
###ATK2STYLE-310
#nl_before_switch                         = ignore   # ignore/add/remove/force

# Add or remove blank line after 'switch' statement
###ATK2STYLE-311
#nl_after_switch                          = ignore   # ignore/add/remove/force

# Add or remove blank line before 'do'
###ATK2STYLE-312
#nl_before_do                             = ignore   # ignore/add/remove/force

# Add or remove blank line after 'do/while' statement
###ATK2STYLE-313
#nl_after_do                              = ignore   # ignore/add/remove/force

# Whether to double-space commented-entries in struct/enum
###ATK2STYLE-314
#nl_ds_struct_enum_cmt                    = true    # false/true

# Whether to double-space before the close brace of a struct/union/enum
# (lower priority than 'eat_blanks_before_close_brace')
###ATK2STYLE-315
#nl_ds_struct_enum_close_brace            = true    # false/true

# Change simple unbraced if statements into a one-liner
# 'if(b)\n i++;' => 'if(b) i++;'
###ATK2STYLE-317
#nl_create_if_one_liner                   = true    # false/true

# Change simple unbraced for statements into a one-liner
# 'for (i=0;i<5;i++)\n foo(i);' => 'for (i=0;i<5;i++) foo(i);'
###ATK2STYLE-318
#nl_create_for_one_liner                  = true    # false/true

# Change simple unbraced while statements into a one-liner
# 'while (i<5)\n foo(i++);' => 'while (i<5) foo(i++);'
###ATK2STYLE-319
#nl_create_while_one_liner                = true    # false/true

#
# Positioning options
#

# The position of arithmetic operators in wrapped expressions
###ATK2STYLE-320
#pos_arith                                = ignore   # ignore/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of assignment in wrapped expressions.
# Do not affect '=' followed by '{'
###ATK2STYLE-321
#pos_assign                               = ignore   # ignore/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of boolean operators in wrapped expressions
###ATK2STYLE-322
#pos_bool                                 = ignore   # ignore/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of comparison operators in wrapped expressions
###ATK2STYLE-323
#pos_compare                              = ignore   # ignore/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of conditional (b ? t : f) operators in wrapped expressions
###ATK2STYLE-324
#pos_conditional                          = ignore   # ignore/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of the comma in wrapped expressions
###ATK2STYLE-325
#pos_comma                                = ignore   # ignore/lead/lead_break/lead_force/trail/trail_break/trail_force

#
# Line Splitting options
#

# Try to limit code width to N number of columns
###ATK2STYLE-328
#code_width                               = 0        # number

# Whether to fully split long 'for' statements at semi-colons
###ATK2STYLE-329
#ls_for_split_full                        = true    # false/true

# Whether to fully split long function protos/calls at commas
###ATK2STYLE-330
#ls_func_split_full                       = true    # false/true

#
# Blank line options
#

# The maximum consecutive newlines
###ATK2STYLE-331
#nl_max                                   = 0        # number

# The number of newlines after a function prototype, if followed by another function prototype
###ATK2STYLE-332
#nl_after_func_proto                      = 0        # number

# The number of newlines after a function prototype, if not followed by another function prototype
###ATK2STYLE-333
#nl_after_func_proto_group                = 0        # number

# The number of newlines after '}' of a multi-line function body
###ATK2STYLE-334
#nl_after_func_body                       = 0        # number

# The number of newlines after '}' of a single line function body
###ATK2STYLE-335
#nl_after_func_body_one_liner             = 0        # number

# The minimum number of newlines before a multi-line comment.
# Doesn't apply if after a brace open or another multi-line comment.
###ATK2STYLE-336
#nl_before_block_comment                  = 0        # number

# The minimum number of newlines before a single-line C comment.
# Doesn't apply if after a brace open or other single-line C comments.
###ATK2STYLE-337
#nl_before_c_comment                      = 0        # number

# Whether to force a newline after a multi-line comment.
###ATK2STYLE-339
#nl_after_multiline_comment               = true    # false/true

# The number of newlines before a 'private:', 'public:', 'protected:', 'signals:', or 'slots:' label.
# Will not change the newline count if after a brace open.
# 0 = No change.
###ATK2STYLE-340
#nl_before_access_spec                    = 0        # number

# The number of newlines after a 'private:', 'public:', 'protected:', 'signals:', or 'slots:' label.
# 0 = No change.
###ATK2STYLE-341
#nl_after_access_spec                     = 0        # number

# The number of newlines between a function def and the function comment.
# 0 = No change.
###ATK2STYLE-342
#nl_comment_func_def                      = 0        # number

# The number of newlines after a try-catch-finally block that isn't followed by a brace close.
# 0 = No change.
###ATK2STYLE-343
#nl_after_try_catch_finally               = 0        # number

# The number of newlines before and after a property, indexer or event decl.
# 0 = No change.
###ATK2STYLE-344
#nl_around_cs_property                    = 0        # number

# The number of newlines between the get/set/add/remove handlers in C#.
# 0 = No change.
###ATK2STYLE-345
#nl_between_get_set                       = 0        # number

# Whether to remove blank lines after '{'
###ATK2STYLE-346
#eat_blanks_after_open_brace              = true    # false/true

# Whether to remove blank lines before '}'
###ATK2STYLE-347
#eat_blanks_before_close_brace            = true    # false/true

#
# Code modifying options (non-whitespace)
#

# Add or remove braces on single-line 'do' statement
###ATK2STYLE-348
#mod_full_brace_do                        = ignore   # ignore/add/remove/force

# Add or remove braces on single-line 'for' statement
###ATK2STYLE-349
#mod_full_brace_for                       = ignore   # ignore/add/remove/force

# Add or remove braces on single-line function definitions. (Pawn)
###ATK2STYLE-350
#mod_full_brace_function                  = ignore   # ignore/add/remove/force

# Add or remove braces on single-line 'if' statement. Will not remove the braces if they contain an 'else'.
###ATK2STYLE-351
#mod_full_brace_if                        = ignore   # ignore/add/remove/force

# Make all if/elseif/else statements in a chain be braced or not. Overrides mod_full_brace_if.
# If any must be braced, they are all braced.  If all can be unbraced, then the braces are removed.
###ATK2STYLE-352
#mod_full_brace_if_chain                  = true    # false/true

# Don't remove braces around statements that span N newlines
###ATK2STYLE-353
#mod_full_brace_nl                        = 0        # number

# Add or remove braces on single-line 'while' statement
###ATK2STYLE-354
#mod_full_brace_while                     = ignore   # ignore/add/remove/force

# Add or remove braces on single-line 'using ()' statement
###ATK2STYLE-355
#mod_full_brace_using                     = ignore   # ignore/add/remove/force

# Add or remove unnecessary paren on 'return' statement
###ATK2STYLE-356
mod_paren_on_return                      = add   # ignore/add/remove/force

# Whether to change optional semicolons to real semicolons
###ATK2STYLE-357
#mod_pawn_semicolon                       = true    # false/true

# Add parens on 'while' and 'if' statement around bools
###ATK2STYLE-358
#mod_full_paren_if_bool                   = true    # false/true

# Whether to remove superfluous semicolons
###ATK2STYLE-359
#mod_remove_extra_semicolon               = true    # false/true

# If a function body exceeds the specified number of newlines and doesn't have a comment after
# the close brace, a comment will be added.
###ATK2STYLE-360
#mod_add_long_function_closebrace_comment = 0        # number

# If a switch body exceeds the specified number of newlines and doesn't have a comment after
# the close brace, a comment will be added.
###ATK2STYLE-361
#mod_add_long_switch_closebrace_comment   = 0        # number

# If an #ifdef body exceeds the specified number of newlines and doesn't have a comment after
# the #endif, a comment will be added.
###ATK2STYLE-362
#mod_add_long_ifdef_endif_comment         = 0        # number

# If an #ifdef or #else body exceeds the specified number of newlines and doesn't have a comment after
# the #else, a comment will be added.
###ATK2STYLE-363
#mod_add_long_ifdef_else_comment          = 0        # number

# If TRUE, will sort consecutive single-line 'import' statements [Java, D]
###ATK2STYLE-364
#mod_sort_import                          = true    # false/true

# If TRUE, will sort consecutive single-line 'using' statements [C#]
###ATK2STYLE-365
#mod_sort_using                           = true    # false/true

# If TRUE, will sort consecutive single-line '#include' statements [C/C++] and '#import' statements [Obj-C]
# This is generally a bad idea, as it may break your code.
###ATK2STYLE-366
#mod_sort_include                         = true    # false/true

# If TRUE, it will move a 'break' that appears after a fully braced 'case' before the close brace.
###ATK2STYLE-367
#mod_move_case_break                      = true    # false/true

# Will add or remove the braces around a fully braced case statement.
# Will only remove the braces if there are no variable declarations in the block.
###ATK2STYLE-368
#mod_case_brace                           = ignore   # ignore/add/remove/force

# If TRUE, it will remove a void 'return;' that appears as the last statement in a function.
###ATK2STYLE-369
#mod_remove_empty_return                  = true    # false/true

#
# Comment modifications
#

# Try to wrap comments at cmt_width columns
###ATK2STYLE-370
#cmt_width                                = 0        # number

# Set the comment reflow mode (default: 0)
# 0: no reflowing (apart from the line wrapping due to cmt_width)
# 1: no touching at all
# 2: full reflow
###ATK2STYLE-371
#cmt_reflow_mode                          = 0        # number

# If false, disable all multi-line comment changes, including cmt_width. keyword substitution, and leading chars.
# Default is true.
###ATK2STYLE-372
#cmt_indent_multi                         = false     # false/true

# Whether to group c-comments that look like they are in a block
###ATK2STYLE-373
#cmt_c_group                              = true    # false/true

# Whether to put an empty '/*' on the first line of the combined c-comment
###ATK2STYLE-374
#cmt_c_nl_start                           = true    # false/true

# Whether to put a newline before the closing '*/' of the combined c-comment
###ATK2STYLE-375
#cmt_c_nl_end                             = true    # false/true

# Whether to put a star on subsequent comment lines
###ATK2STYLE-380
#cmt_star_cont                            = true    # false/true

# The number of spaces to insert at the start of subsequent comment lines
###ATK2STYLE-381 
cmt_sp_before_star_cont                  = 0        # number

# The number of spaces to insert after the star on subsequent comment lines
###ATK2STYLE-382 
cmt_sp_after_star_cont                   = 5        # number

# For multi-line comments with a '*' lead, remove leading spaces if the first and last lines of
# the comment are the same length. Default=True
###ATK2STYLE-383
#cmt_multi_check_last                     = false     # false/true

# The filename that contains text to insert at the head of a file if the file doesn't start with a C/C++ comment.
# Will substitute $(filename) with the current file's name.
###ATK2STYLE-384
#cmt_insert_file_header                   = ""         # string

# The filename that contains text to insert at the end of a file if the file doesn't end with a C/C++ comment.
# Will substitute $(filename) with the current file's name.
###ATK2STYLE-385
#cmt_insert_file_footer                   = ""         # string

# The filename that contains text to insert before a function implementation if the function isn't preceded with a C/C++ comment.
# Will substitute $(function) with the function name and $(javaparam) with the javadoc @param and @return stuff.
# Will also substitute $(fclass) with the class name: void CFoo::Bar() { ... }
###ATK2STYLE-386
#cmt_insert_func_header                   = ""         # string

# The filename that contains text to insert before a class if the class isn't preceded with a C/C++ comment.
# Will substitute $(class) with the class name.
###ATK2STYLE-387
#cmt_insert_class_header                  = ""         # string

# The filename that contains text to insert before a Obj-C message specification if the method isn't preceeded with a C/C++ comment.
# Will substitute $(message) with the function name and $(javaparam) with the javadoc @param and @return stuff.
###ATK2STYLE-388
#cmt_insert_oc_msg_header                 = ""         # string

# If a preprocessor is encountered when stepping backwards from a function name, then
# this option decides whether the comment should be inserted.
# Affects cmt_insert_oc_msg_header, cmt_insert_func_header and cmt_insert_class_header.
###ATK2STYLE-389
#cmt_insert_before_preproc                = true    # false/true

#
# Preprocessor options
#

# Control indent of preprocessors inside #if blocks at brace level 0
###ATK2STYLE-390
#pp_indent                                = ignore   # ignore/add/remove/force

# Whether to indent #if/#else/#endif at the brace level (true) or from column 1 (false)
###ATK2STYLE-391
#pp_indent_at_level                       = true    # false/true

# If pp_indent_at_level=false, specifies the number of columns to indent per level. Default=1.
###ATK2STYLE-392
#pp_indent_count                          = 1        # number

# Add or remove space after # based on pp_level of #if blocks
###ATK2STYLE-393
#pp_space                                 = ignore   # ignore/add/remove/force

# Sets the number of spaces added with pp_space
###ATK2STYLE-394
#pp_space_count                           = 0        # number

# The indent for #region and #endregion in C# and '#pragma region' in C/C++
###ATK2STYLE-395
#pp_indent_region                         = 0        # number

# Whether to indent the code between #region and #endregion
###ATK2STYLE-396
#pp_region_indent_code                    = true    # false/true

# If pp_indent_at_level=true, sets the indent for #if, #else, and #endif when not at file-level
###ATK2STYLE-397
#pp_indent_if                             = 0        # number

# Control whether to indent the code between #if, #else and #endif when not at file-level
###ATK2STYLE-398
#pp_if_indent_code                        = true    # false/true

# Whether to indent '#define' at the brace level (true) or from column 1 (false)
###ATK2STYLE-399
#pp_define_at_level                       = true    # false/true

# You can force a token to be a type with the 'type' option.
# Example:
# type myfoo1 myfoo2
#
# You can create custom macro-based indentation using macro-open,
# macro-else and macro-close.
# Example:
# macro-open  BEGIN_TEMPLATE_MESSAGE_MAP
# macro-open  BEGIN_MESSAGE_MAP
# macro-close END_MESSAGE_MAP
#
# You can assign any keyword to any type with the set option.
# set func_call_user _ N_
#
# The full syntax description of all custom definition config entries
# is shown below:
#
# define custom tokens as:
# - embed whitespace in token using '' escape character, or
#   put token in quotes
# - these: ' " and ` are recognized as quote delimiters
#
# type token1 token2 token3 ...
#             ^ optionally specify multiple tokens on a single line
# define def_token output_token
#                  ^ output_token is optional, then NULL is assumed
# macro-open token
# macro-close token
# macro-else token
# set id token1 token2 ...
#               ^ optionally specify multiple tokens on a single line
#     ^ id is one of the names in token_enum.h sans the CT_ prefix,
#       e.g. PP_PRAGMA
#
# all tokens are separated by any mix of ',' commas, '=' equal signs
# and whitespace (space, tab)
#

#
# Non C-Language Options
#

# Don't change the relative indent of ESQL/C 'EXEC SQL' bodies
###ATK2STYLE-053
#indent_preserve_sql                      = true    # false/true

# Disabled indenting class braces if indent_braces is true
###ATK2STYLE-016
#indent_braces_no_class                   = true    # false/true

# Whether the 'class' body is indented
###ATK2STYLE-023
#indent_class                             = true    # false/true

# Whether to indent the stuff after a leading class colon
###ATK2STYLE-024
#indent_class_colon                       = true    # false/true

# Same as indent_func_call_param, but for class declarations
###ATK2STYLE-031
#indent_func_class_param                  = true    # false/true

# Same as indent_func_call_param, but for class variable constructors
###ATK2STYLE-032
#indent_func_ctor_var_param               = true    # false/true

# Add or remove space after class ':'
###ATK2STYLE-111
#sp_after_class_colon                     = ignore   # ignore/add/remove/force

# Add or remove space before class ':'
###ATK2STYLE-112
#sp_before_class_colon                    = ignore   # ignore/add/remove/force

# Add or remove space between a constructor/destructor and the open paren
###ATK2STYLE-135
#sp_func_class_paren                      = ignore   # ignore/add/remove/force

# Don't split one-line braced statements inside a class xx { } body
###ATK2STYLE-230
#nl_class_leave_one_liners                = true    # false/true

# Add or remove newline between 'template<>' and whatever follows.
###ATK2STYLE-271
#nl_template_class                        = ignore   # ignore/add/remove/force

# Add or remove newline between 'class' and '{'
###ATK2STYLE-272
#nl_class_brace                           = ignore   # ignore/add/remove/force

# Add or remove newline after each ',' in the constructor member initialization
###ATK2STYLE-273
#nl_class_init_args                       = ignore   # ignore/add/remove/force

# Add or remove newline between return type and function name inside a class {}
# Uses nl_func_type_name or nl_func_proto_type_name if set to ignore.
###ATK2STYLE-275
#nl_func_type_name_class                  = ignore   # ignore/add/remove/force

# Add or remove a newline around a class colon.
# Related to pos_class_colon, nl_class_init_args, and pos_comma.
###ATK2STYLE-316
#nl_class_colon                           = ignore   # ignore/add/remove/force

# The position of the comma in the constructor initialization list
###ATK2STYLE-326
#pos_class_comma                          = ignore   # ignore/lead/lead_break/lead_force/trail/trail_break/trail_force

# The position of colons between constructor and member initialization
###ATK2STYLE-327
#pos_class_colon                          = ignore   # ignore/lead/lead_break/lead_force/trail/trail_break/trail_force

# The number of spaces to indent multi-line XML strings.
# Requires indent_align_string=True
###ATK2STYLE-012
#indent_xml_string                        = 0        # number

# The minimum number of newlines before a CPP comment.
# Doesn't apply if after a brace open or other CPP comments.
###ATK2STYLE-338
#nl_before_cpp_comment                    = 0        # number

# Add or remove space between the type and open paren in a C++ cast, i.e. 'int(exp)' vs 'int (exp)'
###ATK2STYLE-118
#sp_cpp_cast_paren                        = ignore   # ignore/add/remove/force

# Control the space after the opening of a C++ comment '// A' vs '//A'
###ATK2STYLE-181
#sp_cmt_cpp_start                         = ignore   # ignore/add/remove/force

# Whether to group cpp-comments that look like they are in a block
###ATK2STYLE-376
#cmt_cpp_group                            = true    # false/true

# Whether to put an empty '/*' on the first line of the combined cpp-comment
###ATK2STYLE-377
#cmt_cpp_nl_start                         = true    # false/true

# Whether to put a newline before the closing '*/' of the combined cpp-comment
###ATK2STYLE-378
#cmt_cpp_nl_end                           = true    # false/true

# Whether to change cpp-comments into c-comments
###ATK2STYLE-379
#cmt_cpp_to_c                             = true    # false/true

# Add or remove space between 'invariant' and '(' in the D language.
###ATK2STYLE-095
#sp_invariant_paren                       = ignore   # ignore/add/remove/force

# Add or remove space after the ')' in 'invariant (C) c' in the D language.
###ATK2STYLE-096
#sp_after_invariant_paren                 = ignore   # ignore/add/remove/force

# Add or remove space between 'version' and '(' in 'version (something) { }' (D language)
# If set to ignore, sp_before_sparen is used.
###ATK2STYLE-141
#sp_version_paren                         = ignore   # ignore/add/remove/force

# Add or remove space between 'scope' and '(' in 'scope (something) { }' (D language)
# If set to ignore, sp_before_sparen is used.
###ATK2STYLE-142
#sp_scope_paren                           = ignore   # ignore/add/remove/force

